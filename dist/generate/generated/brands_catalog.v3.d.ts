/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/catalog/brands': {
        /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
        get: operations['getBrands'];
        /**
         * Creates a *Brand*.
         *
         * **Required Fields**
         * - name
         *
         * **Read-Only Fields**
         * - id
         *
         * **Limits**
         * - 30,000 brands per store limit
         */
        post: operations['createBrand'];
        /**
         * To delete brand objects, you must include a filter.
         *
         * **Required Fields**
         *  - name
         */
        delete: operations['deleteBrands'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/catalog/brands/{brand_id}': {
        /** Returns a single *Brand*. Optional filter parameters can be passed in. */
        get: operations['getBrandById'];
        /**
         * Updates a *Brand*.
         *
         * **Required Fields**
         * - None
         *
         * **Read-Only Fields**
         * - id
         *
         * To update a *Brand Image*, send a request with an `image_url`.
         */
        put: operations['updateBrand'];
        /** Deletes a *Brand*. */
        delete: operations['deleteBrandById'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
    };
    '/catalog/brands/{brand_id}/metafields': {
        /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
        get: operations['getBrandMetafieldsByBrandId'];
        /**
         * Creates a *Brand Metafield*.
         *
         * **Required Fields**
         * - permission_set
         * - namespace
         * - key
         * - value
         *
         * **Read-Only Fields**
         * - id
         *
         * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        post: operations['createBrandMetafield'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
    };
    '/catalog/brands/{brand_id}/metafields/{metafield_id}': {
        /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
        get: operations['getBrandMetafieldByBrandId'];
        /**
         * Updates a *Brand Metafield*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         * * These fields can only be modified by the app (API credentials) that created the metafield:
         * 	* namespace
         * 	* key
         * 	* permission_set
         *
         * **Usage Notes**
         * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         * * The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        put: operations['updateBrandMetafield'];
        /** Deletes a *Brand Metafield*. */
        delete: operations['deleteBrandMetafieldById'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
                /** The ID of the `Metafield`. */
                metafield_id: components['parameters']['MetafieldIdParam'];
            };
        };
    };
    '/catalog/brands/{brand_id}/image': {
        /**
         * Creates a *Brand Image*.
         *
         * **Required Fields**
         * - image_file: Form posts are the only accepted upload option.
         *
         * **Read-Only Fields**
         * - id
         *
         * Only one image at a time can be created. To update a *Brand Image*, use the [Update a brand](/docs/rest-catalog/brands#update-a-brand) endpoint and an `image_url`.
         */
        post: operations['createBrandImage'];
        /** Deletes a *Brand Image*. */
        delete: operations['deleteBrandImage'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
    };
}
export interface components {
    schemas: {
        /**
         * brand_Full
         * @description Common Brand properties.
         */
        brand_Full: {
            /** @description Unique ID of the *Brand*. Read-Only. */
            id?: number;
            /**
             * @description The name of the brand. Must be unique.
             * Required in POST.
             * @example Common Good
             */
            name: string;
            /**
             * @description The title shown in the browser while viewing the brand.
             *
             * @example Common Good
             */
            page_title?: string;
            /** @description Comma-separated list of meta keywords to include in the HTML. */
            meta_keywords?: string[];
            /**
             * @description A meta description to include.
             *
             * @example Common Good is a modern brand.
             */
            meta_description?: string;
            /**
             * @description A comma-separated list of keywords that can be used to locate this brand.
             *
             * @example kitchen, laundry, cart, storage
             */
            search_keywords?: string;
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
             *
             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
             */
            image_url?: string;
            custom_url?: components['schemas']['customUrl_Full'];
        };
        /**
         * metafield_Base
         * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        metafield_Base: {
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            value: string;
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            namespace: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             * |Value|Description
             * |-|-|
             * |`app_only`|Private to the app that owns the field|
             * |`read`|Visible to other API consumers|
             * |`write`|Open for reading and writing by other API consumers|
             * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             */
            permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            description?: string;
        };
        /**
         * customUrl_Full
         * @description The custom URL for the product on the storefront.
         */
        customUrl_Full: {
            /** @description Product URL on the storefront. */
            url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides). */
            is_customized?: boolean;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        metaCollection_Full: {
            pagination?: components['schemas']['pagination_Full'];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection. */
            links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        metaEmpty_Full: {
            [key: string]: unknown;
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         */
        error_Base: {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
        };
        /** metafield_Full */
        metafield_Full: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            id?: number;
        } & components['schemas']['metafield_Base'] & {
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             */
            resource_type?: 'category' | 'brand' | 'product' | 'variant';
            /**
             * @description The ID of the resource with which the metafield is associated.
             *
             * @example 111
             */
            resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafield's creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            date_modified?: string;
        };
    };
    responses: {
        /** Multi-status. Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occured, such as when a `POST` or `PUT` request is successful, but saving the URL or inventory data has failed. */
        General207Status: {
            content: {
                'application/json': components['schemas']['error_Base'];
            };
        };
    };
    parameters: {
        /** @description The ID of the `Brand` to which the resource belongs. */
        BrandIdParam: number;
        /** @description The ID of the `Metafield`. */
        MetafieldIdParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
    };
}
export interface operations {
    /** Returns a list of *Brands*. Optional filter parameters can be passed in. */
    getBrands: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Filter items by ID. */
                id?: number;
                'id:in'?: number[];
                'id:not_in'?: number[];
                'id:min'?: number[];
                'id:max'?: number[];
                'id:greater'?: number[];
                'id:less'?: number[];
                /** Filter items by name. */
                name?: string;
                /** Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`. */
                'name:like'?: string;
                /** Filter items by page_title. */
                page_title?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Field name to sort by. */
                sort?: 'name';
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['brand_Full'][];
                        meta?: components['schemas']['metaCollection_Full'];
                    };
                };
            };
        };
    };
    /**
     * Creates a *Brand*.
     *
     * **Required Fields**
     * - name
     *
     * **Read-Only Fields**
     * - id
     *
     * **Limits**
     * - 30,000 brands per store limit
     */
    createBrand: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Brand
                         * @description Common Brand properties.
                         */
                        data?: {
                            /** @description Unique ID of the *Brand*. Read-Only. */
                            id?: number;
                            /**
                             * @description The name of the brand. Must be unique.
                             * Required in POST.
                             * @example Common Good
                             */
                            name?: string;
                            /**
                             * @description The title shown in the browser while viewing the brand.
                             *
                             * @example Common Good
                             */
                            page_title?: string;
                            /** @description Comma-separated list of meta keywords to include in the HTML. */
                            meta_keywords?: string[];
                            /**
                             * @description A meta description to include.
                             *
                             * @example Common Good is a modern brand.
                             */
                            meta_description?: string;
                            /**
                             * @description A comma-separated list of keywords that can be used to locate this brand.
                             *
                             * @example kitchen, laundry, cart, storage
                             */
                            search_keywords?: string;
                            /**
                             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                             *
                             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                             */
                            image_url?: string;
                            /**
                             * Custom Url Brand
                             * @description The custom URL for the brand on the storefront.
                             */
                            custom_url?: {
                                /**
                                 * @description Brand URL on the storefront.
                                 *
                                 * @example /shoes
                                 */
                                url?: string;
                                /**
                                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                                 *
                                 * @example true
                                 */
                                is_customized?: boolean;
                            };
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            207: components['responses']['General207Status'];
            /** Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
            409: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
            /** Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description The name of the brand. Must be unique.
                     * Required in POST.
                     * @example Common Good
                     */
                    name: string;
                    /**
                     * @description The title shown in the browser while viewing the brand.
                     *
                     * @example Common Good
                     */
                    page_title?: string;
                    /** @description Comma-separated list of meta keywords to include in the HTML. */
                    meta_keywords?: string[];
                    /**
                     * @description A meta description to include.
                     *
                     * @example Common Good is a modern brand.
                     */
                    meta_description?: string;
                    /**
                     * @description A comma-separated list of keywords that can be used to locate this brand.
                     *
                     * @example kitchen, laundry, cart, storage
                     */
                    search_keywords?: string;
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                     *
                     * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                     */
                    image_url?: string;
                    /**
                     * Custom Url Brand
                     * @description The custom URL for the brand on the storefront.
                     */
                    custom_url?: {
                        /**
                         * @description Brand URL on the storefront.
                         *
                         * @example /shoes
                         */
                        url?: string;
                        /**
                         * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *
                         * @example true
                         */
                        is_customized?: boolean;
                    };
                };
            };
        };
    };
    /**
     * To delete brand objects, you must include a filter.
     *
     * **Required Fields**
     *  - name
     */
    deleteBrands: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Filter items by name. */
                name: string;
                /** Filter items by page_title. */
                page_title?: string;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a single *Brand*. Optional filter parameters can be passed in. */
    getBrandById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['brand_Full'];
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
    };
    /**
     * Updates a *Brand*.
     *
     * **Required Fields**
     * - None
     *
     * **Read-Only Fields**
     * - id
     *
     * To update a *Brand Image*, send a request with an `image_url`.
     */
    updateBrand: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Brand
                         * @description Common Brand properties.
                         */
                        data?: {
                            /** @description Unique ID of the *Brand*. Read-Only. */
                            id?: number;
                            /**
                             * @description The name of the brand. Must be unique.
                             * Required in POST.
                             * @example Common Good
                             */
                            name: string;
                            /**
                             * @description The title shown in the browser while viewing the brand.
                             *
                             * @example Common Good
                             */
                            page_title?: string;
                            /**
                             * @description Comma-separated list of meta keywords to include in the HTML.
                             *
                             * @example modern, clean, contemporary
                             */
                            meta_keywords?: string[];
                            /**
                             * @description A meta description to include.
                             *
                             * @example Common Good is a modern brand.
                             */
                            meta_description?: string;
                            /**
                             * @description A comma-separated list of keywords that can be used to locate this brand.
                             *
                             * @example kitchen, laundry, cart, storage
                             */
                            search_keywords?: string;
                            /**
                             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                             *
                             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                             */
                            image_url?: string;
                            /**
                             * Custom Url Brand
                             * @description The custom URL for the brand on the storefront.
                             */
                            custom_url?: {
                                /**
                                 * @description Brand URL on the storefront.
                                 *
                                 * @example /shoes
                                 */
                                url?: string;
                                /**
                                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                                 *
                                 * @example true
                                 */
                                is_customized?: boolean;
                            };
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            207: components['responses']['General207Status'];
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
            /** The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`. */
            409: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
            /** The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Unique ID of the *Brand*. Read-Only. */
                    id?: number;
                    /**
                     * @description The name of the brand. Must be unique.
                     * Required in POST.
                     * @example Common Good
                     */
                    name: string;
                    /**
                     * @description The title shown in the browser while viewing the brand.
                     *
                     * @example Common Good
                     */
                    page_title?: string;
                    /**
                     * @description Comma-separated list of meta keywords to include in the HTML.
                     *
                     * @example modern, clean, contemporary
                     */
                    meta_keywords?: string[];
                    /**
                     * @description A meta description to include.
                     *
                     * @example Common Good is a modern brand.
                     */
                    meta_description?: string;
                    /**
                     * @description A comma-separated list of keywords that can be used to locate this brand.
                     *
                     * @example kitchen, laundry, cart, storage
                     */
                    search_keywords?: string;
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                     *
                     * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                     */
                    image_url?: string;
                    /**
                     * Custom Url Brand
                     * @description The custom URL for the brand on the storefront.
                     */
                    custom_url?: {
                        /**
                         * @description Brand URL on the storefront.
                         *
                         * @example /shoes
                         */
                        url?: string;
                        /**
                         * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *
                         * @example true
                         */
                        is_customized?: boolean;
                    };
                };
            };
        };
    };
    /** Deletes a *Brand*. */
    deleteBrandById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of *Brand Metafields*. Optional filter parameters can be passed in. */
    getBrandMetafieldsByBrandId: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
            query: {
                /** Filter items by ID. */
                id?: number;
                'id:in'?: number[];
                'id:not_in'?: number[];
                'id:min'?: number[];
                'id:max'?: number[];
                'id:greater'?: number[];
                'id:less'?: number[];
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Filter based on a metafield's key. */
                key?: string;
                /** Filter based on a metafield's namespace. */
                namespace?: string;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['metafield_Full'][];
                        meta?: components['schemas']['metaCollection_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
    };
    /**
     * Creates a *Brand Metafield*.
     *
     * **Required Fields**
     * - permission_set
     * - namespace
     * - key
     * - value
     *
     * **Read-Only Fields**
     * - id
     *
     * **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    createBrandMetafield: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['metafield_Full'];
                        /**
                         * Meta
                         * @description Empty meta object; may be used later.
                         */
                        meta?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            /** The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the app's client id, namespace, key, resource_type, and resource_id. */
            409: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
            /** The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['metafield_Base'];
            };
        };
    };
    /** Returns a *Brand Metafield*. Optional filter parameters can be passed in. */
    getBrandMetafieldByBrandId: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
                /** The ID of the `Metafield`. */
                metafield_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['metafield_Full'];
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
    };
    /**
     * Updates a *Brand Metafield*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     * * These fields can only be modified by the app (API credentials) that created the metafield:
     * 	* namespace
     * 	* key
     * 	* permission_set
     *
     * **Usage Notes**
     * * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
     * * The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
     */
    updateBrandMetafield: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
                /** The ID of the `Metafield`. */
                metafield_id: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['metafield_Full'];
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['metafield_Base'];
            };
        };
    };
    /** Deletes a *Brand Metafield*. */
    deleteBrandMetafieldById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: number;
                /** The ID of the `Metafield`. */
                metafield_id: number;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Creates a *Brand Image*.
     *
     * **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     *
     * **Read-Only Fields**
     * - id
     *
     * Only one image at a time can be created. To update a *Brand Image*, use the [Update a brand](/docs/rest-catalog/brands#update-a-brand) endpoint and an `image_url`.
     */
    createBrandImage: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: {
                            image_url?: string;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            400: {
                content: {
                    'application/json': {
                        [key: string]: unknown;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
            /** Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    image_file?: string;
                };
            };
        };
    };
    /** Deletes a *Brand Image*. */
    deleteBrandImage: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Brand` to which the resource belongs. */
                brand_id: components['parameters']['BrandIdParam'];
            };
        };
        responses: {
            204: never;
        };
    };
}
export interface external {
}
