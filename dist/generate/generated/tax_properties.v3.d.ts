/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/tax/properties': {
        /** Retrieve all tax properties defined in this store. */
        get: operations['get-tax-properties'];
        /** Update one or more tax properties. Only fields specified will be adjusted. */
        put: operations['update-tax-properties'];
        /** Create one or more tax properties. A **code** and a **display name** must be included when creating tax properties. */
        post: operations['create-tax-properties'];
        /** Delete one or multiple tax properties. A tax property must have zero usages within product tax properties before you can delete it. */
        delete: operations['delete-tax-properties'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/tax/products/properties': {
        /** Retrieve the tax properties that are associated with one or more products. */
        get: operations['get-product-tax-properties'];
        /** Update the tax properties associated with one or more products. This operation will be additive to any tax property values already associated with the product, overwriting any existing tax property values. */
        put: operations['update-product-tax-properties'];
        /** Delete tax properties that are associated with one or more products. */
        delete: operations['delete-product-tax-properties'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
}
export interface components {
    schemas: {
        Property: {
            /**
             * @description An internal identifier used by other operations.
             * @example 1
             */
            id?: number;
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            code?: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            display_name?: string;
            /**
             * @description Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            description?: string;
            /**
             * Format: date-time
             * @description Datetime.
             * @example 2022-07-21T19:33:57.000Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Datetime.
             * @example 2022-07-21T19:33:57.000Z
             */
            updated_at?: string;
        };
        PropertyPOST: {
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            code: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            display_name: string;
            /**
             * @description Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            description?: string;
        };
        PropertyPUT: {
            /**
             * @description An internal identifier used by other operations.
             * @example 1
             */
            id: number;
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            code?: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            display_name?: string;
            /**
             * @description Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            description?: string;
        };
        /** @description A collection of tax property values associated with a product. */
        ProductTaxProperty: {
            /**
             * @description A reference to the product that the product tax properties are associated with.
             * @example 157
             */
            product_id: number;
            /**
             * @description A simple key-value pairing. The tax property must be defined to associate a value. These values will be sent to the active tax provider during Tax Provider API operations whenever the associated product is included in the operation.
             * @example [object Object]
             */
            tax_properties: {
                [key: string]: unknown;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        MetaOpen: {
            [key: string]: unknown;
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
        /** @description ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56` */
        product_idin: string;
        /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56` */
        idin: string;
        /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56` */
        idin_required: string;
    };
}
export interface operations {
    /** Retrieve all tax properties defined in this store. */
    'get-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56` */
                'id:in'?: components['parameters']['idin'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['Property'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
            /** Request parameters invalid */
            400: unknown;
        };
    };
    /** Update one or more tax properties. Only fields specified will be adjusted. */
    'update-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['Property'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
            /** The request body does not meet specifications. */
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PropertyPUT'][];
            };
        };
    };
    /** Create one or more tax properties. A **code** and a **display name** must be included when creating tax properties. */
    'create-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['Property'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
            /** The request body does not meet specifications. */
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PropertyPOST'][];
            };
        };
    };
    /** Delete one or multiple tax properties. A tax property must have zero usages within product tax properties before you can delete it. */
    'delete-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56` */
                'id:in': components['parameters']['idin_required'];
            };
        };
        responses: {
            /** No Content */
            204: never;
            /** Request parameters invalid */
            400: unknown;
            /** Tax Property is in use and cannot be deleted. */
            409: unknown;
        };
    };
    /** Retrieve the tax properties that are associated with one or more products. */
    'get-product-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56` */
                'product_id:in': components['parameters']['product_idin'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ProductTaxProperty'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
            /** Request parameters invalid */
            400: unknown;
        };
    };
    /** Update the tax properties associated with one or more products. This operation will be additive to any tax property values already associated with the product, overwriting any existing tax property values. */
    'update-product-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ProductTaxProperty'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
            /** The request body does not meet specifications. */
            422: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ProductTaxProperty'][];
            };
        };
    };
    /** Delete tax properties that are associated with one or more products. */
    'delete-product-tax-properties': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56` */
                'product_id:in': components['parameters']['product_idin'];
            };
        };
        responses: {
            /** No Content */
            204: never;
            /** Request parameters invalid */
            400: unknown;
        };
    };
}
export interface external {
}
