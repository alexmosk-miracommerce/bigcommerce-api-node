/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/settings/analytics': {
        /** Returns a list of web analytics providers. */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['AnalyticsProviders'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/analytics/{id}': {
        /** Returns a single web analytics provider data for a default channel. */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                path: {
                    /** Web Analytics Provider ID. */
                    id: number;
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** Successful operation. */
                200: {
                    content: {
                        'application/json': components['schemas']['AnalyticsProvider'];
                    };
                };
                /** Bad request. Authentication Required. */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse400'];
                    };
                };
                /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse404'];
                    };
                };
            };
        };
        /** Updates a single web analytics provider data for a default channel. */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                path: {
                    /** Web Analytics Provider ID. */
                    id: number;
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** Successful operation. */
                200: {
                    content: {
                        'application/json': components['schemas']['AnalyticsProvider'];
                    };
                };
                /** Bad request. Authentication Required. */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse400'];
                    };
                };
                /** The requested resource was not found. Please specify valid Web Analytics Provider ID. */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse404'];
                    };
                };
                /** Web Analytics Provider was in conflict with another Web Analytics Provider. This can be caused by duplicated unique values (such as ID). */
                409: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse409'];
                    };
                };
                /** Web Analytics Provider data was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
                422: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse422'];
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': {
                        channel_id?: number;
                        code?: string;
                        data_tag_enabled?: boolean;
                        enabled?: boolean;
                        id?: number;
                        is_oauth_connected?: unknown;
                        name?: string;
                        version?: number;
                    };
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Web Analytics Provider ID. */
                id: number;
            };
        };
    };
    '/settings/catalog': {
        /**
         * Returns catalog settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['CatalogSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates catalog settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['CatalogSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            /** null set for a particular field removes override on a channel level and means inheritance from a global level */
            requestBody: {
                content: {
                    'application/json': components['schemas']['CatalogSettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/email-statuses': {
        /** Get global transactional email settings or channel specific overrides by `channel_id`. */
        get: operations['get-settings-emails-enabled'];
        /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
        put: operations['put-settings-transactional-emails-enabled'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/favicon/image': {
        /**
         * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
         *
         *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         */
        post: operations['post-favicon-logo-image'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/inventory/notifications': {
        /**
         * Returns inventory notification settings.
         * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['InventoryNotificationsSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates inventory notification settings.
         * * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global setting only.
         * * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
         * * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: unknown;
            };
            /** null set for a particular field removes override on a channel level and means inheritance from a global level */
            requestBody: {
                content: {
                    'application/json': components['schemas']['InventoryNotificationsSettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/logo': {
        /**
         * Returns store logo settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: operations['get-settings-logo'];
        /**
         * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: operations['put-settings-logo'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/logo/image': {
        /**
         * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         */
        post: operations['post-settings-logo-image'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/search/filters': {
        /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
        get: operations['getEnabled'];
        /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
        put: operations['updateEnabled'];
    };
    '/settings/search/filters/available': {
        /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
        get: operations['getAvailable'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/search/filters/contexts': {
        /**
         * Returns a list of contextual filters enabled for a particular channel or category.
         *
         * **Usage Notes**
         *
         * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         * The order of the returned filters will match the sort order of the filters on the storefront.
         */
        get: operations['getContexts'];
        /**
         * Upserts contextual filters for a particular channel or category.
         *
         * **Usage Notes**
         *
         * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         * You can change the order of the filters on the live site by changing the order of the filters you send.
         */
        put: operations['upsertContexts'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/store/locale': {
        /** Returns global locale settings. */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['Locale'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates global locale settings.
         *
         * Set a channel override by using the `channel_id` query parameter. To remove a channel override, set `null` for a field. The field then inherits the global value.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['Locale'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
                /** Provided settings could not be applied for some reason - detailed errors in the response. */
                422: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse'];
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['Locale'];
                };
            };
        };
    };
    '/settings/store/profile': {
        /**
         * Returns store profile settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StoreProfile'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates store profile settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StoreProfile'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
                /** Provided settings could not be applied for some reason - detailed errors in the response. */
                422: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse'];
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['StoreProfile'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/category': {
        /**
         * Returns category settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontCategorySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates category settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontCategorySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
                422: components['responses']['422ErrorResp'];
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['StorefrontCategorySettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/product': {
        /**
         * Returns product settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: operations['get-settings-storefront-product'];
        /**
         * Updates product settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: operations['put-settings-storefront-product'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/robotstxt': {
        /**
         * Returns Robots.txt settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['RobotsTxtSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates Robots.txt settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['RobotsTxtSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['RobotsTxtSettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/search': {
        /**
         * Returns search settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontSearchSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates search settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontSearchSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['StorefrontSearchSettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/security': {
        /**
         * Returns security settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontSecuritySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates security settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontSecuritySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['StorefrontSecuritySettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/seo': {
        /**
         * Returns SEO settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['SEOSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates SEO settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['SEOSettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
                422: components['responses']['422ErrorResp'];
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['SEOSettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/storefront/status': {
        /**
         * Returns storefront status-related settings.
         *
         *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontStatus'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
        };
        /**
         * Updates storefront status-related settings.
         *
         *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
         *
         *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['StorefrontStatus'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['StorefrontStatus'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/inventory': {
        /** Get Inventory Settings */
        get: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['InventorySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
                /** Provided settings could not be applied for some reason - detailed errors in the response. */
                422: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse'];
                    };
                };
            };
        };
        /** Update inventory settings */
        put: {
            parameters: {
                header: {
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                    Accept: components['parameters']['Accept'];
                    /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                    'Content-Type': components['parameters']['ContentType'];
                };
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['InventorySettings'];
                            meta?: components['schemas']['MetaOpen'];
                        };
                    };
                };
            };
            /** null set for a particular field removes override on a channel level and means inheritance from a global level */
            requestBody: {
                content: {
                    'application/json': components['schemas']['InventorySettings'];
                };
            };
        };
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/settings/store/units-of-measurement': {
        /** Get settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical). */
        get: {
            parameters: {
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['MeasurementUnitsSettings'];
                            meta?: {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
                /** The provided settings could not be applied. See detailed errors in the response. */
                422: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse'];
                    };
                };
            };
        };
        /**
         * Update settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
         *
         * The endpoint does not support partial updates. Provide all fields to update global or channel-level settings.
         *
         * Create channel-level settings, or overrides for a channel, using the `channel_id`  query parameter.
         *
         * To delete overrides for a channel, supply `null` as a value for all fields. A channel then inherits global values.
         *
         * The endpoint does not support 'null' as a value for global-level settings.
         */
        put: {
            parameters: {
                query: {
                    /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                    channel_id?: components['parameters']['ChannelIdParam'];
                };
            };
            responses: {
                /** OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
                200: {
                    content: {
                        'application/json': {
                            data?: components['schemas']['MeasurementUnitsSettings'];
                            meta?: {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            requestBody: {
                content: {
                    'application/json': components['schemas']['MeasurementUnitsSettings'];
                };
            };
        };
    };
}
export interface components {
    schemas: {
        /**
         * AddressTypeEnumValues
         * @description Only supports manipulation on a global level.
         * @default Home Office
         */
        AddressTypeEnumValues: 'Home Office' | 'Commercial Office' | 'Retail' | 'Warehouse';
        AnalyticsProvider: {
            /** @description Web Analytics Provider code. */
            code?: string;
            /** @description Flag indicates if Web Analytics Provider is enabled or not. */
            enabled?: boolean;
            /** @description Web Analytics Provider ID. */
            id?: number;
            /** @description Web Analytics Provider title. */
            name?: string;
        };
        AnalyticsProviders: components['schemas']['AnalyticsProvider'][];
        /** AvailableFilter */
        AvailableFilter: components['schemas']['AvailableNormalFilter'] | components['schemas']['AvailablePriceFilter'] | components['schemas']['AvailableOtherFilter'];
        /** AvailableNormalFilter */
        AvailableNormalFilter: {
            id?: string;
            name?: string;
            product_count?: number;
            type?: 'category' | 'brand' | 'rating' | 'product';
        };
        /** AvailableOtherFilter */
        AvailableOtherFilter: {
            id?: string;
            name?: string;
            type?: 'other';
        };
        /** AvailablePriceFilter */
        AvailablePriceFilter: {
            id?: string;
            name?: string;
            price_range_max?: number;
            price_range_min?: number;
            type?: 'price';
        };
        /** @description Error payload for the BigCommerce API. */
        BaseError: {
            instance?: string;
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
        };
        CatalogSettings: {
            auto_approve_reviews?: boolean;
            enable_product_comparisons?: boolean;
        };
        /** CategoryListingModeEnumValues */
        CategoryListingModeEnumValues: 'current_category_only' | 'child_categories' | 'child_categories_if_category_empty';
        /** ConfiguredFilter */
        ConfiguredFilter: components['schemas']['EnabledProductFilter'] | components['schemas']['EnabledPriceFilter'] | components['schemas']['EnabledCategoryFilter'] | components['schemas']['EnabledBrandFilter'] | components['schemas']['EnabledRatingFilter'] | components['schemas']['EnabledMiscFilter'];
        /** ConfiguredFilters */
        ConfiguredFilters: components['schemas']['ConfiguredFilter'][];
        /**
         * ConfiguredFiltersOverride
         * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
         */
        ConfiguredFiltersOverride: {
            context?: components['schemas']['SearchFilterOverrideContextIdentifier'];
            data?: components['schemas']['ConfiguredFilters'];
        };
        /**
         * ContentSortEnumValues
         * @default relevance
         */
        ContentSortEnumValues: 'relevance' | 'alphaasc' | 'alphadesc';
        /** Detailed Errors */
        DetailedErrors: {
            [key: string]: unknown;
        };
        /**
         * EnabledBrandFilter
         * @description A storefront filter for product brand
         */
        EnabledBrandFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            display_product_count?: boolean;
            id?: string;
            is_enabled?: boolean;
            items_to_show?: 5 | 10 | 15;
            sort_by?: 'alpha' | 'item_count';
            type?: 'brand';
        };
        /**
         * EnabledCategoryFilter
         * @description A storefront filter for product category
         */
        EnabledCategoryFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            display_product_count?: boolean;
            id?: string;
            is_enabled?: boolean;
            items_to_show?: 5 | 10 | 15;
            type?: 'category';
        };
        /** EnabledFilter */
        EnabledFilter: components['schemas']['EnabledProductFilter'] | components['schemas']['EnabledPriceFilter'] | components['schemas']['EnabledCategoryFilter'] | components['schemas']['EnabledBrandFilter'] | components['schemas']['EnabledRatingFilter'] | components['schemas']['EnabledMiscFilter'];
        /** EnabledFilters */
        EnabledFilters: components['schemas']['EnabledFilter'][];
        /**
         * EnabledFiltersOverride
         * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
         */
        EnabledFiltersOverride: {
            data?: components['schemas']['EnabledFilters'];
            scope?: components['schemas']['SearchFilterOverrideScopeIdentifier'];
        };
        /**
         * EnabledMiscFilter
         * @description Miscellaneous Filters which appear as a group.
         */
        EnabledMiscFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            display_product_count?: boolean;
            id?: number;
            is_enabled?: boolean;
            show_free_shipping_filter?: boolean;
            show_in_stock_filter?: boolean;
            show_is_featured_filter?: boolean;
            show_product_count?: boolean;
            type?: 'other';
        };
        /**
         * EnabledPriceFilter
         * @description A filter based on the product’s price, shown as a price range on the storefront.
         */
        EnabledPriceFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            id?: string;
            is_enabled?: boolean;
            type?: 'price';
        };
        /**
         * EnabledProductFilter
         * @description A filter that uses product options and custom field data.
         */
        EnabledProductFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            display_product_count?: boolean;
            id?: string;
            is_enabled?: boolean;
            items_to_show?: 5 | 10 | 15;
            sort_by?: 'alpha' | 'option_values' | 'item_count';
            type?: 'product';
        };
        /**
         * EnabledRatingFilter
         * @description A filter based on product review ratings.
         */
        EnabledRatingFilter: {
            collapsed_by_default?: boolean;
            display_name?: string;
            id?: string;
            is_enabled?: boolean;
            type?: 'rating';
        };
        EnabledTransactionalEmails: {
            abandoned_cart_email?: boolean;
            account_details_changed_email?: boolean;
            combined_order_status_email?: boolean;
            create_account_email?: boolean;
            create_guest_account_email?: boolean;
            gift_certificate_email?: boolean;
            invoice_email?: boolean;
            order_message_notification_email?: boolean;
            product_review_email?: boolean;
            return_confirmation_email?: boolean;
            return_statuschange_email?: boolean;
        };
        /** @description A standard error object. */
        Error: {
            code: string;
            message?: string;
        };
        ErrorResponse: components['schemas']['BaseError'] & {
            errors?: components['schemas']['DetailedErrors'];
        };
        ErrorResponse400: {
            schema?: components['schemas']['Error'];
        };
        ErrorResponse404: {
            schema?: components['schemas']['Error'];
        };
        ErrorResponse409: {
            schema?: components['schemas']['Error'];
        };
        ErrorResponse422: {
            schema?: components['schemas']['Error'];
        };
        /** HSTSMaxAgeEnumValues */
        HSTSMaxAgeEnumValues: 'zero_seconds' | 'five_minutes' | 'one_year';
        InventoryNotificationsSettings: {
            low_stock_notification_address?: string[];
            out_of_stock_notification_address?: string[];
        };
        InventorySettings: {
            /** @description Describes storefront behavior when product is out of stock. */
            product_out_of_stock_behavior?: 'do_nothing' | 'hide_product' | 'hide_product_and_accessible' | 'hide_product_and_redirect';
            /** @description Describes storefront behavior when variant is out of stock. */
            option_out_of_stock_behavior?: 'do_nothing' | 'hide_option' | 'label_option';
            /**
             * @description Describes when stock levels are updated.
             *
             * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
             */
            update_stock_behavior?: 'order_placed' | 'order_completed_or_shipped';
            /**
             * @description Describes whether stock levels automatically adjust when you edit an order.
             *
             * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
             */
            edit_order_stock_adjustment?: boolean;
            /**
             * @description Describes whether stock levels automatically adjust when you refund or cancel an order.
             *
             * Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
             */
            refund_order_stock_adjustment?: boolean;
            /** @description Describes whether a storefront displays stock levels. */
            stock_level_display?: 'dont_show' | 'show' | 'show_when_low';
            /**
             * @description Out of stock message displayed to shoppers.
             * @example Currently out of stock
             */
            default_out_of_stock_message?: string;
            /** @description Describes whether an option is hidden in product filtering. Applies when `option_out_of_stock_behavior` is set to `label_option`. */
            hide_in_product_filtering?: boolean;
            /**
             * @description Describes whether pre-order stock levels are shown.
             * @example true
             */
            show_pre_order_stock_levels?: boolean;
            /**
             * @description Describes whether out-of-stock messages are shown on product listing pages.
             * @example true
             */
            show_out_of_stock_message?: boolean;
        };
        /** @description The basic locale settings for a store, used to give shopper information about languages, countries, etc. */
        Locale: {
            /**
             * @default en
             * @example en, en-us
             */
            default_shopper_language: string;
            /**
             * @description Determines whether to display the storefront content in the shopper's browser language or the shopper's selected default language.
             *
             * Available values:
             * * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
             * * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
             * @default default_shopper_language
             * @example default_shopper_language
             */
            shopper_language_selection_method?: 'browser' | 'default_shopper_language';
            /** @default United States */
            store_country?: string;
        };
        LogoSettings: {
            favicon_url?: string;
            logo_image_url?: string;
            logo_text?: string;
            type?: 'image' | 'text';
        };
        LogoSettingsUpdate: {
            logo_text?: string;
            type?: 'image' | 'text';
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        MetaOpen: {
            [key: string]: unknown;
        };
        MetaPaginationObject: {
            pagination?: {
                /** @example 5 */
                count?: number;
                /** @example 1 */
                current_page?: number;
                links?: {
                    /** @example ?limit=5&page=1 */
                    current?: string;
                    /** @example ?limit=5&page=2 */
                    next?: string;
                };
                /** @example 5 */
                per_page?: number;
                /** @example 246 */
                total?: number;
                /** @example 50 */
                total_pages?: number;
            };
        };
        /**
         * ProductSortEnumValues
         * @description The available sorts for PLP pages.
         * @default bestselling
         */
        ProductSortEnumValues: 'featured' | 'bestselling' | 'newest' | 'alphaasc' | 'alphadesc' | 'pricedesc' | 'priceasc' | 'avgcustomerreview' | 'relevance';
        RobotsTxtSettings: {
            robots_txt_ssl?: string;
        };
        SEOSettings: {
            meta_description?: string;
            meta_keywords?: string;
            page_title?: string;
            www_redirect?: 'www' | 'no-www' | 'none';
        };
        /** ContextIdentifier */
        SearchFilterOverrideContextIdentifier: {
            category_id?: number;
            channel_id?: number;
        };
        /** ScopeIdentifier */
        SearchFilterOverrideScopeIdentifier: {
            category_id?: number;
            channel_id?: number;
        };
        /** @description The basic profile settings for a store, used to give the shopper information about the business from which they are purchasing. */
        StoreProfile: {
            store_address?: string;
            store_address_type?: components['schemas']['AddressTypeEnumValues'];
            store_email?: string;
            store_name?: string;
            store_phone?: string;
        };
        StorefrontCategorySettings: {
            category_tree_depth?: number;
            default_product_sort?: components['schemas']['ProductSortEnumValues'];
            listing_mode?: components['schemas']['CategoryListingModeEnumValues'];
        };
        /** StorefrontProductSettings */
        StorefrontProductSettings: {
            /**
             * @description Determines the visibility of the product price.
             *
             * @example true
             */
            show_product_price?: boolean;
            /**
             * @description Determines the visibility of the product SKU.
             *
             * @example true
             */
            show_product_sku?: boolean;
            /** @description Determines the visibility of the product's weight. */
            show_product_weight?: boolean;
            /**
             * @description Determines the visibility of the product's brand.
             *
             * @example true
             */
            show_product_brand?: boolean;
            /** @description Determines the visibility of the product's shipping option. */
            show_product_shipping?: boolean;
            /**
             * @description Determines the visibility of the product's rating.
             *
             * @example true
             */
            show_product_rating?: boolean;
            /**
             * @description Determines the visibility of the Add to Cart link.
             *
             * @example true
             */
            show_add_to_cart_link?: boolean;
            /**
             * @description The product's pre-order message. If undefined, the message defaults to the storewide setting.
             *
             * @example Preorder message
             */
            default_preorder_message?: string;
            /** @example show_one */
            show_breadcrumbs_product_pages?: 'show_one' | 'show_none';
            /**
             * @description Determines the visibility of the Add to Cart quantity setting.
             *
             * @example true
             */
            show_add_to_cart_qty_box?: boolean;
            /**
             * @description Determines the visibilty of the Add to Wishlist setting.
             *
             * @example true
             */
            show_add_to_wishlist?: boolean;
            /** @description Determines the visibility of the price. */
            hide_price_from_guests?: boolean;
        };
        StorefrontSearchSettings: {
            content_product_sort: components['schemas']['ContentSortEnumValues'];
            default_product_sort: components['schemas']['ProductSortEnumValues'];
            /** @description Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level. */
            product_filtering_enabled: boolean;
            search_suggest: boolean;
        };
        /** StorefrontSecuritySettings */
        StorefrontSecuritySettings: {
            csp_header?: {
                enabled?: boolean;
                header_value?: string;
            };
            hsts?: {
                enabled?: boolean;
                include_preload?: boolean;
                include_subdomains?: boolean;
                max_age?: components['schemas']['HSTSMaxAgeEnumValues'];
            };
            sitewide_https_enabled?: boolean;
            x_frame_options_header?: {
                allowed_url?: string;
                enabled?: boolean;
                setting?: 'deny' | 'same_origin' | 'allow_from_url';
            };
        };
        StorefrontStatus: {
            down_for_maintenance_message?: string;
            prelaunch_message?: string;
            /** @description A read-only value representing the auto-generated storefront password. */
            prelaunch_password?: string;
        };
        MeasurementUnitsSettings: {
            /** @example Ounces */
            weight_measurement?: 'LBS' | 'Ounces' | 'KGS' | 'Grams' | 'Tonnes';
            /** @example Inches */
            length_measurement?: 'Inches' | 'Centimeters';
            /** @example . */
            decimal_token?: string;
            /** @example , */
            thousands_token?: string;
            /** @example 2 */
            decimal_places?: number;
            /** @example depth */
            factoring_dimension?: 'depth' | 'height' | 'width';
        };
    };
    responses: {
        /** OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        '200-storefront-product-settings': {
            content: {
                'application/json': {
                    data?: components['schemas']['StorefrontProductSettings'];
                    meta?: components['schemas']['MetaOpen'];
                };
            };
        };
        /** `422 Unprocessable Entity` Provided settings could not be applied for some reason - detailed errors in the response. */
        '422ErrorResp': {
            content: {
                'application/json': {
                    errors?: {
                        /** @example Incorrect value [current__only], it should match one of: current_category_only,child_categories_if_category_empty,child_categories; Incorrect value [besling], it should match one of: featured, newest, bestselling, alphaasc, alphadesc, avgcustomerreview, priceasc, pricedesc, relevance */
                        ''?: string;
                    };
                    /** @example 422 */
                    status?: number;
                    /** @example JSON data is missing or invalid */
                    title?: string;
                    /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
                    type?: string;
                };
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
        /** @description Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
        ChannelIdParam: number;
        /** @description Array of strings (CSV) representing which configuration keys should be cleared (un-overridden) for the Channel. */
        KeysToDelete: string[];
        /** @description Required Channel ID. This delete operation will delete overridden settings for this channel, thus restoring them to the global defaults. */
        RequiredChannelIdParamForDelete: number;
    };
}
export interface operations {
    /** Get global transactional email settings or channel specific overrides by `channel_id`. */
    'get-settings-emails-enabled': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['EnabledTransactionalEmails'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
    };
    /** Update global transactional email settings or create channel specific overrides by `channel_id`. */
    'put-settings-transactional-emails-enabled': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['EnabledTransactionalEmails'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['EnabledTransactionalEmails'];
            };
        };
    };
    /**
     * Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
     *
     *   - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     */
    'post-favicon-logo-image': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK */
            204: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    FaviconFile?: string;
                };
            };
        };
    };
    /**
     * Returns store logo settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    'get-settings-logo': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['LogoSettings'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
    };
    /**
     * Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    'put-settings-logo': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['LogoSettings'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['LogoSettingsUpdate'];
            };
        };
    };
    /**
     * Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     */
    'post-settings-logo-image': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            /** OK */
            204: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    LogoFile?: string;
                };
            };
        };
    };
    /** Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides. */
    getEnabled: {
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ConfiguredFilters'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
    };
    /** Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. */
    updateEnabled: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ConfiguredFilters'];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ConfiguredFilters'];
            };
        };
    };
    /** Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings). */
    getAvailable: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            query: {
                /** Narrows the list of available filters based on channel ID. Only products currently assigned to the given Channel will be considered. */
                channel_id?: number;
                /** Narrows the list of available filters based on category ID. You can display settings to show products from the provided category, subcategories only, or both the category and its child categories. */
                category_id?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['AvailableFilter'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
    };
    /**
     * Returns a list of contextual filters enabled for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * The order of the returned filters will match the sort order of the filters on the storefront.
     */
    getContexts: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Only return contextual overrides related to a particular Channel. */
                channel_id?: number;
                /** Only return contextual overrides related to a particular Category. */
                category_id?: number;
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ConfiguredFiltersOverride'][];
                        meta?: components['schemas']['MetaPaginationObject'];
                    };
                };
            };
        };
    };
    /**
     * Upserts contextual filters for a particular channel or category.
     *
     * **Usage Notes**
     *
     * Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
     *
     * You can change the order of the filters on the live site by changing the order of the filters you send.
     */
    upsertContexts: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            /** OK */
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['ConfiguredFiltersOverride'][];
                        meta?: components['schemas']['MetaOpen'];
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ConfiguredFiltersOverride'][];
            };
        };
    };
    /**
     * Returns product settings.
     *
     *  - Channel ID can be used as a query parameter for getting channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
     */
    'get-settings-storefront-product': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            200: components['responses']['200-storefront-product-settings'];
        };
    };
    /**
     * Updates product settings.
     *
     *  - Channel ID can be used as a query parameter for updating channel-specific setting. If omitted, you will interact with the global setting only.
     *
     *  - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
     */
    'put-settings-storefront-product': {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            query: {
                /** Channel ID to use for channel-specific setting. If omitted, you will interact with the global setting only. */
                channel_id?: components['parameters']['ChannelIdParam'];
            };
        };
        responses: {
            200: components['responses']['200-storefront-product-settings'];
            422: components['responses']['422ErrorResp'];
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['StorefrontProductSettings'];
            };
        };
    };
}
export interface external {
}
