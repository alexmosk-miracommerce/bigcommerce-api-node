/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/checkouts/{checkoutId}': {
        /**
         * Returns a *Checkout*.
         *
         * The cart ID and checkout ID are the same.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        get: operations['CheckoutsByCheckoutIdGet'];
        /**
         * Updates *Checkout* customer messages.
         *
         * **Limits**
         *
         * * 2000 character limit
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        put: operations['CheckoutsByCheckoutIdPut'];
    };
    '/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}': {
        /**
         * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
         *
         * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/docs/rest-storefront/carts/cart-items#add-cart-line-items) endpoint or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
         *
         * > #### Notes
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
         */
        put: operations['CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut'];
        /**
         * Deletes a *Line Item* from the *Cart*.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        delete: operations['CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete'];
    };
    '/checkouts/{checkoutId}/billing-address': {
        /**
         * Adds a billing address to an existing *Checkout*.
         *
         * **Required Fields**
         * * country_code
         *
         *
         * > #### Note
         * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
         * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        post: operations['CheckoutsBillingAddressByCheckoutIdPost'];
    };
    '/checkouts/{checkoutId}/billing-address/{addressId}': {
        /**
         * Updates an existing billing address on *Checkout*.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        put: operations['CheckoutsBillingAddressByCheckoutIdAndAddressIdPut'];
    };
    '/checkouts/{checkoutId}/consignments': {
        /**
         * Adds a new *Consignment* to *Checkout*.
         *
         * Perform the following two steps to define the fulfillment of the items in the cart.
         *   ### For **shipping** consignments:
         *     1. Add a new Consignment to Checkout.
         *         * Send a `POST` request to `/consignments` with each shipping address, line item IDs, and quantities. Each address can have its own line item IDs.
         *         * Provide a full valid customer address before placing the order. If provided, the order placement will succeed.
         *         * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on the items, the address, and the shipping location. This will return `availableShippingOptions` in the response.
         *
         *       * Required Fields:
         *         * `shipping_address` (deprecated) or `address`
         *         * `lineItems`
         *     2. Update the Consignment with Shipping Options using the [REST Storefront API](/checkouts/checkout-consignments#update-a-consignment), the [REST Management API](/docs/rest-management/checkouts/checkout-consignments#update-checkout-consignment) or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
         *
         *   ### For **pickup** consignments:
         *     1. Create a new consignment object.
         *       - Send a `POST` request to `/consignments` with line item IDs and quantities.
         *       - Provide a `pickupMethodId`. This is the `id` of the Pickup Method provided in the response body of the Storefront Pickup Options API.
         *       - Required Fields:
         *           * `pickupOption`
         *           * `lineItems`
         *
         * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/docs/storefront/cart-checkout/guide/rest-storefront).
         *
         * > #### Notes
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
         */
        post: operations['CheckoutsConsignmentsByCheckoutIdPost'];
    };
    '/checkouts/{checkoutId}/consignments/{consignmentId}': {
        /**
         * Updates an existing consignment. An update is either one of the following:
         *
         * 1. Updates the consignment address and/or line items.
         * 2. Selects a specific fulfillment option.
         *
         * ### Update the consignment address and line items
         * For this type of update, the payload is the same as when creating a new consignment.         Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from the POST `/consignment` response.
         *
         * **Note:**
         * Updating a consignment could invalidate the value for `selectedShippingOption` and `selectedPickupOption`.
         *
         * ### Select a specific fulfillment option
         * Before placing an order, each consignment must have a `selectedShippingOption` or a `selectedPickupOption`.
         *
         * If the consignment already has a pick-up option selected and a shipping option is provided, the pick-up option will be deselected and the shipping option will be selected instead (and vice versa). The `PUT` request will fail if it contains a shipping option ID and a pickup option ID.
         *
         * Required Fields:
         * * `shippingOptionId` or `pickupOptionId`
         * * `lineItems`
         *
         * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/docs/storefront/cart-checkout/guide/consignments).
         *
         * > #### Notes
         * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
         */
        put: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut'];
        /**
         * Removes an existing *Consignment* from *Checkout*.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        delete: operations['CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'];
    };
    '/checkouts/{checkoutId}/gift-certificates': {
        /**
         * Adds a *Gift Certificate Code* to *Checkout*.
         *
         * > #### Note
         * > * *Gift Certificates* are treated as a payment methods.
         * > * You are not able to purchase a gift certificate with a gift certificate.
         * > * The rate limit is 20/hour (only for unique gift-certificate codes).
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        post: operations['CheckoutsGiftCertificatesByCheckoutIdPost'];
    };
    '/checkouts/{checkoutId}/gift-certificates/{giftCertificateCode}': {
        /**
         * Deletes an existing *Gift Certificate*.
         *
         * This removes the *Gift Certificate* payment method.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        delete: operations['CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete'];
    };
    '/checkouts/{checkoutId}/coupons': {
        /**
         * Adds a *Coupon Code* to *Checkout*.
         *
         * **Required Fields**
         * * couponCode
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        post: operations['CheckoutsCouponsByCheckoutIdPost'];
    };
    '/checkouts/{checkoutId}/coupons/{couponCode}': {
        /**
         * Deletes a *Coupon Code* from *Checkout*.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        delete: operations['CheckoutsCouponsByCheckoutIdAndCouponCodeDelete'];
    };
    '/checkouts/{checkoutId}/store-credit': {
        /**
         * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        post: operations['CheckoutStoreCreditAdd'];
        /**
         * Removes store credit from a checkout.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        delete: operations['CheckoutsStoreCreditRemove'];
    };
    '/checkouts/{checkoutId}/spam-protection': {
        /**
         * Verifies if checkout is created by human.
         *
         * > #### Note
         * > * Substitute your storefront domain for `yourstore.example.com`.
         * > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        post: operations['checkoutSpamProtection'];
    };
}
export interface components {
    schemas: {
        /** SpamProtectionRequest */
        SpamProtectionRequest: {
            token?: string;
        };
        /** checkout_Full */
        checkout_Full: {
            /** Format: uuid */
            id?: string;
            cart?: components['schemas']['checkoutCart'];
            billingAddress?: components['schemas']['address_Base'];
            consignments?: components['schemas']['consignment_Full'][];
            /** @description Coupons applied at the checkout level. */
            coupons?: components['schemas']['CheckoutCoupon'][];
            orderId?: string | null;
            /**
             * Format: float
             * @description Shipping cost before any discounts are applied.
             */
            shippingCostTotal?: number;
            /** @description Gift wrapping cost for all items, including or excluding tax. */
            giftWrappingCostTotal?: number;
            /**
             * Format: float
             * @description Handling cost for all consignments including or excluding tax.
             */
            handlingCostTotal?: number;
            /** Format: float */
            taxTotal?: number;
            taxes?: components['schemas']['checkoutTax'][];
            /**
             * Format: float
             * @description Subtotal of the checkout before applying item-level discounts. Tax inclusive based on the store settings.
             */
            subtotal?: number;
            /**
             * Format: float
             * @description The total payable amount, before applying any store credit or gift certificate.
             */
            grandTotal?: number;
            /** @description Applied gift certificate (as a payment method). */
            giftCertificates?: components['schemas']['checkoutGiftCertificates'][];
            /** @description Time when the cart was created. */
            createdTime?: string;
            /** @description Time when the cart was last updated. */
            updatedTime?: string;
            /** @description Shopperʼs message provided as details for the order to be created from this cart */
            customerMessage?: string;
            /** @description `grandTotal` subtract the store-credit amount */
            outstandingBalance?: number;
            /** @description `true` value indicates StoreCredit has been applied. */
            isStoreCreditApplied?: boolean;
        };
        /** Cart Coupon */
        CartCoupon: {
            /** @description The coupon ID. */
            id?: number;
            /** @description the coupon code */
            code: string;
            /** @description The coupon title based on different types provided in control panel section. */
            displayName?: string;
            /** @description Key name to identify the type of coupon. */
            couponType?: 'per_item_discount' | 'percentage_discount' | 'per_total_discount' | 'shipping_discount' | 'free_shipping' | 'promotion';
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             */
            discountedAmount?: number;
        };
        /** Checkout Coupon */
        CheckoutCoupon: {
            /** @description The coupon ID. */
            id?: number;
            /** @description the coupon code */
            code: string;
            /** @description The coupon title based on different types provided in control panel section. */
            displayName?: string;
            /**
             * @description |Type `int`|Type Name|
             * |-|-|
             * |`0`|`per_item_discount`|
             * |`1`|`percentage_discount`|
             * |`2`|`per_total_discount`|
             * |`3`|`shipping_discount`|
             * |`4`|`free_shipping`|
             * |`5`|`promotion`|
             */
            couponType?: number;
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             */
            discountedAmount?: number;
        };
        /**
         * contactEntity
         * @description Model for sender and receiver objects.
         */
        contactEntity: {
            name?: string;
            email?: string;
        };
        /** address_Full */
        address_Full: components['schemas']['address_Base'] & {
            id?: string;
            /** @description Indicates whether we should add this address to the customer address book. */
            shouldSaveAddress?: boolean;
        };
        /** address_Base */
        address_Base: {
            firstName?: string;
            lastName?: string;
            email?: string;
            company?: string;
            address1?: string;
            address2?: string;
            city?: string;
            /** @description Represents state or province. */
            stateOrProvince?: string;
            stateOrProvinceCode?: string;
            /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
            countryCode: string;
            postalCode?: string;
            phone?: string;
            customFields?: components['schemas']['customFields'][];
        };
        /**
         * customFields
         * @description When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string.
         */
        customFields: {
            fieldId?: string;
            /** @description This can also be an array for fields that need to support list of values; for example, a set of checkboxes. When doing a PUT or POST to the `fieldValue` with a pick list, the input must be a number. The response will be a string. */
            fieldValue?: string;
        };
        /**
         * consignment_Full
         * @description This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items.
         */
        consignment_Full: {
            id?: string;
            shippingAddress?: {
                [key: string]: unknown;
            };
            address?: components['schemas']['address_Full'];
            selectedPickupOption?: components['schemas']['PickupOption'];
            /** @description This is available only when "include=consignments.availableShippingOptions" is present in the URL. */
            availableShippingOptions?: components['schemas']['consignmentAvailableShippingOptions'][];
            /** Selected Shipping Option */
            selectedShippingOption?: {
                /** @description Read only. */
                description?: string;
                id?: string;
                /** @description Specifies the type of shipping option; for example, flat rate, UPS, etc. */
                type?: string;
                imageUrl?: string;
                /** Format: double */
                cost?: number;
                /** @description An estimate of the arrival time. */
                transitTime?: string;
                /** @description Read only. Field used for Shipping Provider API. */
                additionalDescription?: string;
            };
            /** @description List of consignment discounts applied through coupons. */
            couponDiscounts?: {
                /** @description Coupon code that applied this discount. */
                code?: string;
                /** Format: double */
                amount?: number;
            }[];
            /** @description List of consignment discounts applied through cart level discounts. */
            discounts?: {
                /** @description Discount rule ID that applied this discount. */
                id?: string;
            }[];
            /**
             * Format: double
             * @description The shipping cost for this consignment.
             */
            shippingCost?: number;
            /**
             * Format: double
             * @description The handling cost of shipping for this consignment.
             */
            handlingCost?: number;
            lineItemIds?: string[];
        };
        /** consignmentAvailableShippingOptions */
        consignmentAvailableShippingOptions: components['schemas']['consignmentShippingOption_Base'] & {
            /** @description Is this shipping method the recommended shipping option or not. */
            isRecommended?: boolean;
            additionalDescription?: string;
        };
        /** checkoutTax */
        checkoutTax: {
            /** @description Name of the tax. */
            name?: string;
            /** Format: double */
            amount?: number;
        };
        /** checkout_Put */
        checkout_Put: {
            customerMessage?: string;
        };
        /** checkouts_Resp */
        checkouts_Resp: {
            /** Checkout */
            data?: {
                /** Format: uuid */
                id?: string;
                /**
                 * Cart
                 * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
                 */
                cart?: {
                    /**
                     * Format: uuid
                     * @description Cart ID, provided after creating a cart with a POST.
                     */
                    id?: string;
                    /**
                     * Format: int32
                     * @description ID of the customer to which the cart belongs.
                     */
                    customer_id?: number;
                    /** @description The cartʼs email. This is the same email that is used in the billing address */
                    email?: string;
                    /**
                     * Currency
                     * @description The currency in which prices are displayed (the store default currency).
                     */
                    currency?: {
                        /** @description The currency name. */
                        name?: string;
                        /** @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
                        code?: string;
                        /** @description The currency symbol. */
                        symbol?: string;
                        /**
                         * Format: double
                         * @description The number of decimal places for the currency. For example, the USD currency has two decimal places.
                         */
                        decimalPlaces?: number;
                    };
                    /** @description Boolean representing whether tax information is included. */
                    istaxIncluded?: boolean;
                    /**
                     * Format: double
                     * @description The cost of the cart’s contents, before applying discounts.
                     */
                    baseAmount?: number;
                    /**
                     * Format: double
                     * @description Order-based discounted amount only - Excludes coupon discounts and product-based discounts.
                     */
                    discountAmount?: number;
                    /**
                     * Format: double
                     * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes, where applicable.
                     */
                    cartAmount?: number;
                    coupons?: {
                        /** @description The coupon ID. */
                        id?: string;
                        /** @description the coupon code */
                        code: string;
                        /** @description The coupon title based on different types provided in control panel section. */
                        displayName?: string;
                        /** @description Key name to identify the type of coupon. */
                        couponType?: string;
                        /**
                         * Format: double
                         * @description The discounted amount applied within a given context.
                         */
                        discountedAmount?: number;
                    }[];
                    discounts?: {
                        /** @description The name provided by the merchant. */
                        name?: string;
                        /**
                         * Format: double
                         * @description The discounted amount applied within a given context.
                         */
                        discountedAmount?: number;
                    }[];
                    lineItems?: {
                        physicalItems: {
                            /** @description The line-item ID. */
                            id?: string;
                            /** @description The product is part of a bundle, such as a product pick list, then the parentId or the main product ID will populate. */
                            parentId?: string;
                            /** @description ID of the variant. */
                            variantId?: number;
                            /** @description ID of the product. */
                            productId?: number;
                            /** @description SKU of the variant. */
                            sku?: string;
                            /** @description The itemʼs product name. */
                            name?: string;
                            /** @description The product URL. */
                            url?: string;
                            /**
                             * Format: double
                             * @description Quantity of this item.
                             */
                            quantity: number;
                            /** @description Whether the item is taxable. */
                            isTaxable?: boolean;
                            /** @description A publicly-accessible URL for an image of this item. */
                            imageUrl?: string;
                            /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
                            discounts?: {
                                /** @description The name provided by the merchant. */
                                name?: string;
                                /**
                                 * Format: double
                                 * @description The discounted amount applied within a given context.
                                 */
                                discountedAmount?: number;
                            }[];
                            /**
                             * Format: double
                             * @description The total value of all discounts applied to this item (excluding coupon).
                             */
                            discountAmount?: number;
                            /** @description The product's brand. */
                            brand?: string;
                            /**
                             * Format: double
                             * @description The total value of all coupons applied to this item.
                             */
                            couponAmount?: number;
                            /** @description The item’s original price is the same as the product’s default price. */
                            originalPrice?: number;
                            /**
                             * Format: double
                             * @description The item’s list price, as quoted by the manufacturer or distributor.
                             */
                            listPrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs price after all discounts are applied. (The final price before tax calculation.)
                             */
                            salePrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs list price multiplied by the quantity.
                             */
                            extendedListPrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs sale price multiplied by the quantity.
                             */
                            extendedSalePrice?: number;
                            /** @description the product type - physical or digital */
                            type?: string;
                            /** @description If the item was added automatically by a promotion, such as a coupon or buy one, get one. */
                            addedByPromotion?: boolean;
                            /** @description Whether this item requires shipping to a physical address. */
                            isShippingRequired?: boolean;
                            isMutable?: boolean;
                            /** Gift Wrapping */
                            giftWrapping?: {
                                name?: string;
                                message?: string;
                                /** Format: double */
                                amount?: number;
                            };
                        }[];
                        digitalItems: {
                            /** @description The line-item ID. */
                            id?: string;
                            /** @description Bundled items will have their parentʼs item ID. */
                            parentId?: string;
                            /**
                             * Format: double
                             * @description ID of the variant.
                             */
                            variantId?: number;
                            /**
                             * Format: double
                             * @description ID of the product.
                             */
                            productId?: number;
                            /** @description SKU of the variant. */
                            sku?: string;
                            /** @description The itemʼs product name. */
                            name?: string;
                            /** @description The product URL. */
                            url?: string;
                            /**
                             * Format: double
                             * @description Quantity of this item.
                             */
                            quantity: number;
                            /** @description The itemʼs brand. */
                            brand?: string;
                            /** @description Whether the item is taxable. */
                            isTaxable?: boolean;
                            /** @description A publicly-accessible URL for an image of this item. */
                            imageUrl?: string;
                            /** @description List of discounts applied to this item, as an array of AppliedDiscount objects. */
                            discounts?: {
                                /** @description The name provided by the merchant. */
                                name?: string;
                                /**
                                 * Format: double
                                 * @description The discounted amount applied within a given context.
                                 */
                                discountedAmount?: number;
                            }[];
                            /**
                             * Format: double
                             * @description The total value of all discounts applied to this item (excluding coupon).
                             */
                            discountAmount?: number;
                            /**
                             * Format: double
                             * @description The total value of all coupons applied to this item.
                             */
                            couponAmount?: number;
                            /** @description The item’s original price is the same as the product’s default price. */
                            originalPrice?: number;
                            /**
                             * Format: double
                             * @description The item’s list price, as quoted by the manufacturer or distributor.
                             */
                            listPrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs price after all discounts are applied. (The final price before tax calculation.)
                             */
                            salePrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs list price multiplied by the quantity.
                             */
                            extendedListPrice?: number;
                            /**
                             * Format: double
                             * @description The itemʼs sale price multiplied by the quantity.
                             */
                            extendedSalePrice?: number;
                            /** @description the product type - physical or digital */
                            type?: string;
                            isMutable?: boolean;
                            /** @description Whether this item requires shipping to a physical address. */
                            isShippingRequired?: boolean;
                            /** @description URLs to download all product files. */
                            downloadFileUrls?: string[];
                            /** @description The URL for the combined downloads page. */
                            downloadPageUrl?: string;
                            /** @description Specifies the combined download size in human-readable style; for example, `30MB`. */
                            downloadSize?: string;
                        }[];
                        giftCertificate?: {
                            /** @description Gift certificate identifier */
                            id?: string;
                            /** @description The name of the purchased gift certificate; for example, `$20 Gift Certificate`. */
                            name?: string;
                            /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
                            theme: string;
                            /**
                             * Format: double
                             * @description Value must be between $1.00 and $1,000.00.
                             */
                            amount: number;
                            taxable?: boolean;
                            /** Contact Entity */
                            sender: {
                                name?: string;
                                email?: string;
                            };
                            /** Contact Entity */
                            recipient: {
                                name?: string;
                                email?: string;
                            };
                            /** @description Limited to 200 characters. */
                            message?: string;
                            /** @description Explicitly specifying the gift certificate type. */
                            type?: string;
                        }[];
                        customItems?: {
                            /** @description ID of the custom item */
                            id?: string;
                            /** @description Custom item SKU */
                            sku?: string;
                            /** @description Item name */
                            name?: string;
                            quantity?: string;
                            /** @description Price of the item. With or without tax depending on your store setup. */
                            listPrice?: string;
                        }[];
                    }[];
                    /** @description Time when the cart was created. */
                    createdTime?: string;
                    /** @description Time when the cart was last updated. */
                    updatedTime?: string;
                };
                /** Address Response */
                billingAddress?: {
                    firstName?: string;
                    lastName?: string;
                    email?: string;
                    company?: string;
                    address1?: string;
                    address2?: string;
                    city?: string;
                    /** @description Represents state or province. */
                    stateOrProvince?: string;
                    stateOrProvinceCode?: string;
                    /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
                    countryCode: string;
                    postalCode?: string;
                    phone?: string;
                    customFields?: {
                        fieldId?: string;
                        /** @description This can also be an array for fields that need to support list of values; for example, a set of checkboxes. */
                        fieldValue?: string;
                    }[];
                } & {
                    id?: string;
                };
                /** @description This allows you to have multiple shipping addresses per checkout. Where there is only one shipping address, this array will contain only one value, with all the items. */
                consignments?: {
                    id?: string;
                    shippingAddress?: {
                        [key: string]: unknown;
                    };
                    /** Address Response */
                    address?: {
                        firstName?: string;
                        lastName?: string;
                        email?: string;
                        company?: string;
                        address1?: string;
                        address2?: string;
                        city?: string;
                        /** @description Represents state or province. */
                        stateOrProvince?: string;
                        stateOrProvinceCode?: string;
                        /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
                        countryCode: string;
                        postalCode?: string;
                        phone?: string;
                        customFields?: {
                            fieldId?: string;
                            /** @description This can also be an array for fields that need to support list of values; for example, a set of checkboxes. */
                            fieldValue?: string;
                        }[];
                    } & {
                        id?: string;
                    };
                    /** @description This is available only when "include=consignments.availableShippingOptions" is presented in the URL. */
                    availableShippingOptions?: ({
                        /** @description Read only. */
                        description?: string;
                        id?: string;
                        /** @description Specified the type of shipping option. Flat rate, UPS, etc., */
                        type?: string;
                        imageUrl?: string;
                        /** Format: double */
                        cost?: number;
                        /** @description An estimate of the arrival time. */
                        transitTime?: string;
                    } & {
                        /** @description Is this shipping method the recommended shipping option or not. */
                        isRecommended?: boolean;
                    })[];
                    /** Selected Shipping Option */
                    selectedShippingOption?: {
                        /** @description Read only. */
                        description?: string;
                        id?: string;
                        /** @description Specifies the type of shipping option; for example, flat rate, UPS, etc. */
                        type?: string;
                        imageUrl?: string;
                        /** Format: double */
                        cost?: number;
                        /** @description An estimate of the arrival time. */
                        transitTime?: string;
                    };
                    /** @description List of consignment discounts applied through coupons */
                    couponDiscounts?: {
                        /** @description Coupon code that applied this discount */
                        code?: string;
                        /** Format: double */
                        amount?: number;
                    }[];
                    /** @description List of consignment discounts applied through cart level discounts. */
                    discounts?: {
                        /** @description Discount rule ID that applied this discount */
                        id?: string;
                    }[];
                    /**
                     * Format: double
                     * @description The shipping cost for this consignment.
                     */
                    shippingCost?: number;
                    /**
                     * Format: double
                     * @description The handling cost of shipping for this consignment.
                     */
                    handlingCost?: number;
                    lineItemIds?: string[];
                }[];
                /** @description Coupons applied at checkout level. */
                coupons?: components['schemas']['CheckoutCoupon'][];
                orderId?: string;
                /**
                 * Format: float
                 * @description Shipping cost before any discounts are applied.
                 */
                shippingCostTotal?: number;
                /** @description Gift wrapping for all items, including or excluding tax. */
                giftWrappingCostTotal?: number;
                /**
                 * Format: float
                 * @description Handling cost for all consignments including or excluding tax.
                 */
                handlingCostTotal?: number;
                /** Format: float */
                taxTotal?: number;
                taxes?: {
                    /**
                     * @description Name of the tax charged. This is either the system default or the custom name created for the tax.
                     * @example Texas Taxes
                     */
                    name?: string;
                    /**
                     * Format: float
                     * @description Amount of the tax.
                     * @example 1.12
                     */
                    amount?: number;
                }[];
                /**
                 * Format: float
                 * @description Subtotal of the checkout before applying item-level discounts. Tax inclusive based on the store settings.
                 */
                subtotal?: number;
                /**
                 * Format: float
                 * @description The total payable amount, before applying any store credit or gift certificate.
                 */
                grandTotal?: number;
                /** @description Applied gift certificate (as a payment method). */
                giftCertificates?: {
                    /** Format: double */
                    balance?: number;
                    code?: string;
                    /** Format: date */
                    purchaseDate?: string;
                    /** Format: double */
                    remaining?: number;
                    /** Format: double */
                    used?: number;
                }[];
                /** @description Time when the cart was created. */
                createdTime?: string;
                /** @description Time when the cart was last updated. */
                updatedTime?: string;
                /** @description Shopperʼs message provided as details for the order to be created from this cart. */
                customerMessage?: string;
                /** @description `grandTotal` subtract the store-credit amount */
                outstandingBalance?: number;
                /** @description `true` value indicates StoreCredit has been applied. */
                isStoreCreditApplied?: boolean;
            };
        };
        /** cartLineItemPut */
        cartLineItemPut: {
            /** Format: double */
            quantity?: number;
            /** Format: double */
            productId?: number;
            /** Format: double */
            variantId?: number;
            giftWrapping?: components['schemas']['cartLineItemGiftWrapping_Put'];
        };
        /** cartLineItemGiftCertificate_Put */
        cartLineItemGiftCertificate_Put: {
            /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
            theme: string;
            /** Format: double */
            amount: number;
            sender: components['schemas']['contactEntity'];
            recipient: components['schemas']['contactEntity'];
            /** @description Message shown to recipient, as provided by sender. */
            message?: string;
            /** Format: double */
            quantity: number;
        };
        /**
         * Gift Wrapping Request Data
         * @description if passing null, it will remove the current gift wrapping for the item
         */
        cartLineItemGiftWrapping_Put: {
            /**
             * @description Boolean value that specifies whether items whether items should be wrapped together or wrapped individually.
             * @example true
             */
            wrapTogether: boolean;
            /**
             * @description Details for the gift wrapping option selected. This can be specified for each line item or together based on wrapTogether value.
             * If wrapTogether is false, each element in the wrapDetails array determines each item's specific wrapping.
             * (e.g if this line item has 6 quantity, you can pass at maximum 6 elements for the array to spefified each one's wrapping)
             * If wrapTogether is true, we will only use 1st element in the wrapDetails array to determine what to be wrapped
             */
            wrapDetails: {
                /** @description Identifier of the gift wrapping option selected. */
                id: number;
                /**
                 * @description Custom gift message.
                 * @example Happy Birthday
                 */
                message?: string;
            }[];
        } | null;
        /** Create Consignment Request */
        CreateConsignmentRequest: {
            shippingAddress?: {
                [key: string]: unknown;
            };
            /** Address Properties */
            address?: {
                firstName?: string;
                lastName?: string;
                email?: string;
                company?: string;
                address1?: string;
                address2?: string;
                city?: string;
                /** @description Represents state or province. */
                stateOrProvince?: string;
                stateOrProvinceCode?: string;
                /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
                countryCode: string;
                postalCode?: string;
                phone?: string;
                customFields?: {
                    fieldId?: string;
                    fieldValue?: string;
                }[];
                /** @description Indicates whether we should add this address to the customer address book. */
                shouldSaveAddress?: boolean;
            };
            lineItems?: {
                itemId: string;
                /** Format: int32 */
                quantity: number;
            }[];
            shippingOptionId?: string;
            pickupOption?: {
                pickupMethodId?: number;
            };
        };
        /** Gift Certificate Request */
        GiftCertificateRequest: {
            giftCertificateCode?: string;
        };
        /** cart_Put */
        cart_Put: {
            lineItem?: components['schemas']['cartLineItemPut'];
            giftCertificate?: components['schemas']['cartLineItemGiftCertificate_Put'];
        };
        /**
         * Update Consignment Request
         * @description One or more of these three fields is mandatory. You can update address and line items in one request. You have to update shipping option ID or pickup option ID in a separate request since changing the address or line items can invalidate the previously available shipping options.
         */
        NewUpdateConsignment: {
            shippingAddress?: {
                [key: string]: unknown;
            };
            /** Address Properties */
            address?: {
                firstName?: string;
                lastName?: string;
                email?: string;
                company?: string;
                address1?: string;
                address2?: string;
                city?: string;
                /** @description Represents state or province. */
                stateOrProvince?: string;
                stateOrProvinceCode?: string;
                /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) */
                countryCode: string;
                postalCode?: string;
                phone?: string;
                customFields?: {
                    fieldId?: string;
                    fieldValue?: string;
                }[];
                /** @description Indicates whether we should add this address to the customer address book. */
                shouldSaveAddress?: boolean;
            };
            lineItems?: {
                itemId: string;
                /** Format: int32 */
                quantity: number;
            }[];
            shippingOptionId?: string;
            pickupOption?: {
                pickupMethodId?: number;
            };
        };
        /**
         * checkoutCart
         * @description A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
         */
        checkoutCart: {
            /**
             * Format: uuid
             * @description Cart ID, provided after creating a cart with a POST.
             */
            id?: string;
            /**
             * Format: int32
             * @description ID of the customer to which the cart belongs.
             */
            customer_id?: number;
            /** @description The cartʼs email. This is the same email that is used in the billing address. */
            email?: string;
            /**
             * Currency
             * @description The currency in which prices are displayed; the store default currency.
             */
            currency?: {
                /** @description The currency name. */
                name?: string;
                /** @description ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.) */
                code?: string;
                /** @description The currency symbol. */
                symbol?: string;
                /**
                 * Format: double
                 * @description The number of decimal places for the currency. For example, the USD currency has two decimal places.
                 */
                decimalPlaces?: number;
            };
            /** @description Boolean representing whether tax information is included. */
            isTaxIncluded?: boolean;
            /**
             * Format: double
             * @description Cost of cart’s contents, before applying discounts.
             */
            baseAmount?: number;
            /**
             * Format: double
             * @description Discounted amount.
             */
            discountAmount?: number;
            /**
             * Format: double
             * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes, where applicable.
             */
            cartAmount?: number;
            coupons?: components['schemas']['CartCoupon'][];
            discounts?: {
                /** @description The name provided by the merchant. */
                name?: string;
                /**
                 * Format: double
                 * @description The discounted amount applied within a given context.
                 */
                discountedAmount?: number;
            }[];
            lineItems?: {
                physicalItems: {
                    /** @description The line-item ID. */
                    id?: string;
                    /** @description The product is part of a bundle such as a product pick list, then the parentId or the main product ID will populate. */
                    parentId?: string;
                    /** @description ID of the variant. */
                    variantId?: number;
                    /** @description ID of the product. */
                    productId?: number;
                    /** @description SKU of the variant. */
                    sku?: string;
                    /** @description The itemʼs product name. */
                    name?: string;
                    /** @description The product URL. */
                    url?: string;
                    /**
                     * Format: double
                     * @description Quantity of this item.
                     */
                    quantity: number;
                    /** @description Whether the item is taxable. */
                    isTaxable?: boolean;
                    /** @description A publicly-accessible URL for an image of this item. */
                    imageUrl?: string;
                    /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
                    discounts?: {
                        /** @description The name provided by the merchant. */
                        name?: string;
                        /**
                         * Format: double
                         * @description The discounted amount applied within a given context.
                         */
                        discountedAmount?: number;
                    }[];
                    /**
                     * Format: double
                     * @description The total value of all discounts applied to this item (excluding coupon).
                     */
                    discountAmount?: number;
                    /**
                     * Format: double
                     * @description The total value of all coupons applied to this item.
                     */
                    couponAmount?: number;
                    /**
                     * Format: double
                     * @description The item’s list price, as quoted by the manufacturer or distributor.
                     */
                    listPrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs price after all discounts are applied. The final price before tax calculation.
                     */
                    salePrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs list price multiplied by the quantity.
                     */
                    extendedListPrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs sale price multiplied by the quantity.
                     */
                    extendedSalePrice?: number;
                    /** @description The itemʼs comparison price */
                    comparisonPrice?: number;
                    /** @description The itemʼs comparison price multiplied by the quantity. */
                    extendedComparisonPrice?: number;
                    /** @description the product type - physical or digital */
                    type?: string;
                    /** @description If the item was added automatically by a promotion, such as a coupon or buy one, get one. */
                    addedByPromotion?: boolean;
                    /** @description Whether this item requires shipping to a physical address. */
                    isShippingRequired?: boolean;
                    isMutable?: boolean;
                    /** Gift Wrapping */
                    giftWrapping?: {
                        name?: string;
                        message?: string;
                        /** Format: double */
                        amount?: number;
                    };
                }[];
                digitalItems: {
                    /** @description The line-item ID. */
                    id?: string;
                    /** @description Bundled items will have their parentʼs item ID. */
                    parentId?: string;
                    /**
                     * Format: double
                     * @description ID of the variant.
                     */
                    variantId?: number;
                    /**
                     * Format: double
                     * @description ID of the product.
                     */
                    productId?: number;
                    /** @description SKU of the variant. */
                    sku?: string;
                    /** @description The itemʼs product name. */
                    name?: string;
                    /** @description The product URL. */
                    url?: string;
                    /**
                     * Format: double
                     * @description Quantity of this item.
                     */
                    quantity: number;
                    /** @description Whether the item is taxable. */
                    isTaxable?: boolean;
                    /** @description A publicly-accessible URL for an image of this item. */
                    imageUrl?: string;
                    /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
                    discounts?: {
                        /** @description The name provided by the merchant. */
                        name?: string;
                        /**
                         * Format: double
                         * @description The discounted amount applied within a given context.
                         */
                        discountedAmount?: number;
                    }[];
                    /**
                     * Format: double
                     * @description The total value of all discounts applied to this item (excluding coupon).
                     */
                    discountAmount?: number;
                    /**
                     * Format: double
                     * @description The total value of all coupons applied to this item.
                     */
                    couponAmount?: number;
                    /**
                     * Format: double
                     * @description The item’s list price, as quoted by the manufacturer or distributor.
                     */
                    listPrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs price after all discounts are applied. The final price before tax calculation.
                     */
                    salePrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs list price multiplied by the quantity.
                     */
                    extendedListPrice?: number;
                    /**
                     * Format: double
                     * @description The itemʼs sale price multiplied by the quantity.
                     */
                    extendedSalePrice?: number;
                    /** @description The product type - physical or digital. */
                    type?: string;
                    /** @description Whether this item requires shipping to a physical address. */
                    isShippingRequired?: boolean;
                    /** @description URLs to download all product files. */
                    downloadFileUrls?: string[];
                    /** @description The URL for the combined downloads page. */
                    downloadPageUrl?: string;
                    /** @description Specifies the combined download size in human-readable style; for example, `30MB`. */
                    downloadSize?: string;
                }[];
                giftCertificate?: {
                    /** @description Gift certificate identifier */
                    id?: string;
                    /** @description The name of the purchased gift certificate; for example, `$20 Gift Certificate`. */
                    name?: string;
                    /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
                    theme: string;
                    /**
                     * Format: double
                     * @description Value must be between $1.00 and $1,000.00.
                     */
                    amount: number;
                    taxable?: boolean;
                    /** Contact Entity */
                    sender: {
                        name?: string;
                        email?: string;
                    };
                    /** Contact Entity */
                    recipient: {
                        name?: string;
                        email?: string;
                    };
                    /** @description Limited to 200 characters. */
                    message?: string;
                    /** @description Explicitly specifying the gift certificate type. */
                    type?: string;
                }[];
                customItems?: {
                    /** @description ID of the custom item. */
                    id?: string;
                    /** @description Custom item SKU. */
                    sku?: string;
                    /** @description Item name. */
                    name?: string;
                    quantity?: string;
                    /** @description Price of the item. With or without tax depending on your store setup. */
                    listPrice?: string;
                }[];
            }[];
            /** @description Time when the cart was created. */
            createdTime?: string;
            /** @description Time when the cart was last updated. */
            updatedTime?: string;
        };
        /**
         * checkoutGiftCertificates
         * @description Applied gift certificate (as a payment method).
         */
        checkoutGiftCertificates: {
            /** Format: double */
            balance?: number;
            code?: string;
            /** Format: date */
            purchaseDate?: string;
            /** Format: double */
            remaining?: number;
            /** Format: double */
            used?: number;
        }[];
        /** consignmentShippingOption_Base */
        consignmentShippingOption_Base: {
            /** @description Read only. */
            description?: string;
            id?: string;
            /** @description Specifies the type of shipping option; for example, flat rate, UPS, etc. */
            type?: string;
            imageUrl?: string;
            /** Format: double */
            cost?: number;
            /** @description An estimate of the arrival time. */
            transitTime?: string;
        };
        /**
         * Pickup Option
         * @description An option that represents a location where customers can pick up items.
         */
        PickupOption: {
            pickupMethodId?: number;
        };
    };
    responses: {
        Checkout: {
            content: {
                'application/json': components['schemas']['checkout_Full'];
            };
        };
    };
    parameters: {
        include: string;
    };
}
export interface operations {
    /**
     * Returns a *Checkout*.
     *
     * The cart ID and checkout ID are the same.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsByCheckoutIdGet: {
        parameters: {
            path: {
                checkoutId: string;
            };
            query: {
                /**
                 * * `cart.lineItems.physicalItems.options` - physical options
                 * * `cart.lineItems.digitalItems.options` - digital options
                 * * `cart.lineItems.physicalItems.categoryNames` - physical categories
                 * * `cart.lineItems.digitalItems.categoryNames` - digital categories
                 * * `cart.lineItems.customItems.categoryNames` - custom categories
                 * * `customer` - customer
                 * * `customer.customerGroup` - customer group
                 * * `payments` - payments
                 * * `promotions` - promotions
                 * * `consignments.availableShippingOptions` - shipping options
                 */
                include?: 'cart.lineItems.physicalItems.options' | 'cart.lineItems.digitalItems.options' | 'cart.lineItems.physicalItems.categoryNames' | 'cart.lineItems.digitalItems.categoryNames' | 'cart.lineItems.customItems.categoryNames' | 'customer' | 'customer.customerGroup' | 'payments' | 'promotions' | 'consignments.availableShippingOptions';
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkouts_Resp'];
                };
            };
            /** When a problem arises, returns a generic response. */
            400: {
                content: {
                    'application/json': {
                        errors?: {
                            /** Format: int32 */
                            status?: number;
                            title?: string;
                            type?: string;
                            detail?: string;
                        }[];
                    };
                };
            };
        };
    };
    /**
     * Updates *Checkout* customer messages.
     *
     * **Limits**
     *
     * * 2000 character limit
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsByCheckoutIdPut: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkouts_Resp'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['checkout_Put'];
            };
        };
    };
    /**
     * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.
     *
     * If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/docs/rest-storefront/carts/cart-items#add-cart-line-items) endpoint or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
     *
     * > #### Notes
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     */
    CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPut: {
        parameters: {
            path: {
                checkoutId: string;
                cartId: string;
                itemId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['cart_Put'];
            };
        };
    };
    /**
     * Deletes a *Line Item* from the *Cart*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete: {
        parameters: {
            path: {
                checkoutId: string;
                cartId: string;
                itemId: string;
            };
        };
        responses: {
            /** NOTE: Discounted line items are re-evaluated on cart actions and may be automatically added back to your cart with a new line item ID to satisfy promotional requirements. */
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
    };
    /**
     * Adds a billing address to an existing *Checkout*.
     *
     * **Required Fields**
     * * country_code
     *
     *
     * > #### Note
     * > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically.
     * > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process.
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsBillingAddressByCheckoutIdPost: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
            /** The email trying to be set for the guest is associated with an account. The customer must sign in. */
            403: unknown;
            /** Unable to determine if provided email is associated with an account. The customer must sign in. */
            429: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['address_Base'];
            };
        };
    };
    /**
     * Updates an existing billing address on *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsBillingAddressByCheckoutIdAndAddressIdPut: {
        parameters: {
            path: {
                checkoutId: string;
                addressId: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
            /** The email trying to be set for the guest is associated with an account. The customer must sign in. */
            403: unknown;
            /** Unable to determine if provided email is associated with an account. The customer must sign in. */
            429: unknown;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['address_Base'];
            };
        };
    };
    /**
     * Adds a new *Consignment* to *Checkout*.
     *
     * Perform the following two steps to define the fulfillment of the items in the cart.
     *   ### For **shipping** consignments:
     *     1. Add a new Consignment to Checkout.
     *         * Send a `POST` request to `/consignments` with each shipping address, line item IDs, and quantities. Each address can have its own line item IDs.
     *         * Provide a full valid customer address before placing the order. If provided, the order placement will succeed.
     *         * As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on the items, the address, and the shipping location. This will return `availableShippingOptions` in the response.
     *
     *       * Required Fields:
     *         * `shipping_address` (deprecated) or `address`
     *         * `lineItems`
     *     2. Update the Consignment with Shipping Options using the [REST Storefront API](/checkouts/checkout-consignments#update-a-consignment), the [REST Management API](/docs/rest-management/checkouts/checkout-consignments#update-checkout-consignment) or the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront).
     *
     *   ### For **pickup** consignments:
     *     1. Create a new consignment object.
     *       - Send a `POST` request to `/consignments` with line item IDs and quantities.
     *       - Provide a `pickupMethodId`. This is the `id` of the Pickup Method provided in the response body of the Storefront Pickup Options API.
     *       - Required Fields:
     *           * `pickupOption`
     *           * `lineItems`
     *
     * To learn more about creating a Checkout Consignment, see the [Carts and Checkouts Tutorial](/docs/storefront/cart-checkout/guide/rest-storefront).
     *
     * > #### Notes
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     */
    CheckoutsConsignmentsByCheckoutIdPost: {
        parameters: {
            path: {
                checkoutId: string;
            };
            query: {
                include?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateConsignmentRequest'][];
            };
        };
    };
    /**
     * Updates an existing consignment. An update is either one of the following:
     *
     * 1. Updates the consignment address and/or line items.
     * 2. Selects a specific fulfillment option.
     *
     * ### Update the consignment address and line items
     * For this type of update, the payload is the same as when creating a new consignment.         Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from the POST `/consignment` response.
     *
     * **Note:**
     * Updating a consignment could invalidate the value for `selectedShippingOption` and `selectedPickupOption`.
     *
     * ### Select a specific fulfillment option
     * Before placing an order, each consignment must have a `selectedShippingOption` or a `selectedPickupOption`.
     *
     * If the consignment already has a pick-up option selected and a shipping option is provided, the pick-up option will be deselected and the shipping option will be selected instead (and vice versa). The `PUT` request will fail if it contains a shipping option ID and a pickup option ID.
     *
     * Required Fields:
     * * `shippingOptionId` or `pickupOptionId`
     * * `lineItems`
     *
     * To learn more about creating a Checkout Consignment see [Checkout Consignment API](/docs/storefront/cart-checkout/guide/consignments).
     *
     * > #### Notes
     * > * You cannot pass both an `address` and a `shippingOptionId` because the shipping option may not be available for the new address
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     * > * Please note that this API endpoint is not concurrent safe, meaning multiple simultaneous requests could result in unexpected and inconsistent results.
     */
    CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPut: {
        parameters: {
            path: {
                checkoutId: string;
                consignmentId: string;
            };
            query: {
                include?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['NewUpdateConsignment'];
            };
        };
    };
    /**
     * Removes an existing *Consignment* from *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDelete: {
        parameters: {
            path: {
                checkoutId: string;
                consignmentId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
    };
    /**
     * Adds a *Gift Certificate Code* to *Checkout*.
     *
     * > #### Note
     * > * *Gift Certificates* are treated as a payment methods.
     * > * You are not able to purchase a gift certificate with a gift certificate.
     * > * The rate limit is 20/hour (only for unique gift-certificate codes).
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsGiftCertificatesByCheckoutIdPost: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
            /** Gift certificate code not found */
            404: {
                content: {
                    'application/json': {
                        [key: string]: unknown;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GiftCertificateRequest'];
            };
        };
    };
    /**
     * Deletes an existing *Gift Certificate*.
     *
     * This removes the *Gift Certificate* payment method.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsGiftCertificatesByCheckoutIdAndGiftCertificateCodeDelete: {
        parameters: {
            path: {
                checkoutId: string;
                giftCertificateCode: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
    };
    /**
     * Adds a *Coupon Code* to *Checkout*.
     *
     * **Required Fields**
     * * couponCode
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsCouponsByCheckoutIdPost: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    couponCode?: string;
                };
            };
        };
    };
    /**
     * Deletes a *Coupon Code* from *Checkout*.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsCouponsByCheckoutIdAndCouponCodeDelete: {
        parameters: {
            path: {
                checkoutId: string;
                couponCode: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
    };
    /**
     * Applies any available store credit to a checkout. As on the storefront, all available store credit will be used (up to the value of the order) and no amount need be specified.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutStoreCreditAdd: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['checkouts_Resp'];
                };
            };
        };
    };
    /**
     * Removes store credit from a checkout.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    CheckoutsStoreCreditRemove: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    /**
     * Verifies if checkout is created by human.
     *
     * > #### Note
     * > * Substitute your storefront domain for `yourstore.example.com`.
     * > * The Send a Test Request feature is not currently supported for this endpoint.
     */
    checkoutSpamProtection: {
        parameters: {
            path: {
                checkoutId: string;
            };
        };
        responses: {
            /** Returns Checkout Object. */
            200: {
                content: {
                    'application/json': components['schemas']['checkout_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SpamProtectionRequest'];
            };
        };
    };
}
export interface external {
}
