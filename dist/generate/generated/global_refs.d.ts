/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/users/{userId}': {
        /** Retrieve the information of the user with the matching user ID. */
        get: operations['get-users-userId'];
        /** Update the information of an existing user. */
        patch: operations['patch-users-userId'];
        parameters: {
            path: {
                /** Id of an existing user. */
                userId: number;
            };
        };
    };
    '/user': {
        /** Create a new user. */
        post: operations['post-user'];
    };
}
export interface components {
    schemas: {
        /**
         * User
         * @example [object Object]
         */
        User: {
            /** @description Unique identifier for the given user. */
            id: number;
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            /**
             * Format: date
             * @example 1997-10-31
             */
            dateOfBirth?: string;
            /** @description Set to true if the user's email has been verified. */
            emailVerified: boolean;
            /**
             * Format: date
             * @description The date that the user was created.
             */
            createDate?: string;
        };
        /**
         * meta_Empty
         * @description Response metadata.
         */
        meta_Empty: {
            [key: string]: unknown;
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
    };
}
export interface operations {
    /** Retrieve the information of the user with the matching user ID. */
    'get-users-userId': {
        parameters: {
            path: {
                /** Id of an existing user. */
                userId: number;
            };
        };
        responses: {
            /** User Found */
            200: {
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            /** User Not Found */
            404: unknown;
        };
    };
    /** Update the information of an existing user. */
    'patch-users-userId': {
        parameters: {
            path: {
                /** Id of an existing user. */
                userId: number;
            };
        };
        responses: {
            /** User Updated */
            200: {
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            /** User Not Found */
            404: unknown;
            /** Email Already Taken */
            409: unknown;
        };
        /** Patch user properties to update. */
        requestBody: {
            content: {
                'application/json': {
                    firstName?: string;
                    lastName?: string;
                    /** @description If a new email is given, the user ºs email verified property will be set to false. */
                    email?: string;
                    dateOfBirth?: string;
                };
            };
        };
    };
    /** Create a new user. */
    'post-user': {
        responses: {
            /** User Created */
            200: {
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            /** Missing Required Information */
            400: unknown;
            /** Email Already Taken */
            409: unknown;
        };
        /** Post the necessary fields for the API to create a new user. */
        requestBody: {
            content: {
                'application/json': {
                    firstName: string;
                    lastName: string;
                    email: string;
                    /** Format: date */
                    dateOfBirth: string;
                };
            };
        };
    };
}
export interface external {
}
