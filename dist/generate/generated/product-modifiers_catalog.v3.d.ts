/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/catalog/products/{product_id}/modifiers': {
        /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
        get: operations['getModifiers'];
        /**
         * Creates a *Product Modifier*.
         *
         * **Required Fields**
         * * `required`
         * * `display_name`
         * * `type`
         *
         * **Read-Only Fields**
         * * `id`
         *
         * **Notes**
         * It takes two separate requests to create a new checkbox modifier with option values. Perform a request to create a modifier, then perform a second request to update option values.
         */
        post: operations['createModifier'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}': {
        /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
        get: operations['getModifierById'];
        /** Updates a *Product Modifier*. */
        put: operations['updateModifier'];
        /** Deletes a *Product Modifier*. */
        delete: operations['deleteModifierById'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values': {
        /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
        get: operations['getModifierValues'];
        /**
         * Creates a *Modifier Value*.
         *
         * **Required Fields**
         * * label
         * * sort_order
         *
         * **Read-Only Fields**
         * * id
         */
        post: operations['createModifierValue'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}': {
        /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
        get: operations['getModifierValueById'];
        /**
         * Updates a *Modifier Value*.
         *
         * **Required Fields**
         * * none
         *
         * **Read-Only Fields**
         * * id
         */
        put: operations['updateModifierValue'];
        /** Deletes a *Modifier Value*. */
        delete: operations['deleteModifierValueById'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
                /** The ID of the `Modifier/Option Value`. */
                value_id: components['parameters']['ValueIdParam'];
            };
        };
    };
    '/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image': {
        /**
         * Creates a *Modifier Image*.
         *
         * The image will show on the storefront when the value is selected.
         *
         *  **Required Fields**
         * - image_file: Form posts are the only accepted upload option.
         */
        post: operations['createModifierImage'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
                /** The ID of the `Modifier/Option Value`. */
                value_id: components['parameters']['ValueIdParam'];
            };
        };
    };
}
export interface components {
    schemas: {
        /**
         * productModifier_Base
         * @description Common Modifier properties.
         */
        productModifier_Base: {
            /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
            type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
            required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            sort_order?: number;
            config?: components['schemas']['config_Full'];
            /** @description The name of the option shown on the storefront. */
            display_name?: string;
        };
        /**
         * productModifier_Full
         * @description Product Modifier
         */
        productModifier_Full: components['schemas']['productModifier_Base'] & {
            /**
             * @description The unique numeric ID of the modifier; increments sequentially.
             *
             * @example 12
             */
            id?: number;
            /**
             * @description The unique numeric ID of the product to which the option belongs.
             *
             * @example 77
             */
            product_id?: number;
            /**
             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535039590-191
             */
            name?: string;
            option_values?: components['schemas']['productModifierOptionValue_Full'][];
        };
        /**
         * productModifierOptionValue_Base
         * @description Common Product Modifer `option_value` properties.
         */
        productModifierOptionValue_Base: {
            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
            is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            label: string;
            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
            sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`. */
            value_data?: {
                [key: string]: unknown;
            } | null;
            adjusters?: components['schemas']['adjusters_Full'];
        };
        /**
         * productModifierOptionValue_Full
         * @description Product Modifer `option_value`.
         */
        productModifierOptionValue_Full: components['schemas']['productModifierOptionValue_Base'] & {
            /** @description The unique numeric ID of the value; increments sequentially. */
            id?: number;
            option_id?: number;
        };
        /**
         * adjuster_Full
         * @description Adjuster for Complex Rules.
         */
        adjuster_Full: {
            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            adjuster_value?: number;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        metaCollection_Full: {
            pagination?: components['schemas']['pagination_Full'];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection. */
            links?: {
                /** @description Link to the previous page returned in the response. */
                previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                current?: string;
                /** @description Link to the next page returned in the response. */
                next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        metaEmpty_Full: {
            [key: string]: unknown;
        };
        /**
         * config_Full
         * @description The values for option config can vary based on the Modifier created.
         */
        config_Full: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
            default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
            checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option. */
            checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
            date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             */
            date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             */
            date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *   `other` - Allows file types defined in the `file_types_other` array.
             */
            file_types_supported?: string[];
            /** @description (file) A list of other file types allowed with the file upload option. */
            file_types_other?: string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
            text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
            number_highest_value?: number;
            /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
            number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
            product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
            product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        /** adjusters_Full */
        adjusters_Full: {
            price?: components['schemas']['adjuster_Full'];
            weight?: components['schemas']['adjuster_Full'];
            /**
             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
             */
            image_url?: string;
            purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                message?: string;
            };
        };
    };
    parameters: {
        /** @description The ID of the `Product` to which the resource belongs. */
        ProductIdParam: number;
        /** @description The ID of the `Modifier`. */
        ModifierIdParam: number;
        /** @description The ID of the `Modifier/Option Value`. */
        ValueIdParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
    };
}
export interface operations {
    /** Returns a list of all *Product Modifiers*. Optional parameters can be passed in. */
    getModifiers: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
            };
            query: {
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['productModifier_Full'][];
                        meta?: components['schemas']['metaCollection_Full'];
                    };
                };
            };
        };
    };
    /**
     * Creates a *Product Modifier*.
     *
     * **Required Fields**
     * * `required`
     * * `display_name`
     * * `type`
     *
     * **Read-Only Fields**
     * * `id`
     *
     * **Notes**
     * It takes two separate requests to create a new checkbox modifier with option values. Perform a request to create a modifier, then perform a second request to update option values.
     */
    createModifier: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Modifer
                         * @description Product Modifier
                         */
                        data?: {
                            /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                            type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
                            required: boolean;
                            /** @description The order the modifiers display on the product detail page. */
                            sort_order?: number;
                            /**
                             * Option Config
                             * @description The values for option config can vary based on the Modifier created.
                             */
                            config?: {
                                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                                default_value?: string;
                                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                                checked_by_default?: boolean;
                                /** @description (checkbox) Label displayed for the checkbox option. */
                                checkbox_label?: string;
                                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                                date_limited?: boolean;
                                /**
                                 * @description (date) The type of limit that is allowed to be entered on a date option.
                                 *
                                 * @example range
                                 */
                                date_limit_mode?: 'earliest' | 'range' | 'latest';
                                /**
                                 * Format: date
                                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 */
                                date_earliest_value?: string;
                                /**
                                 * Format: date
                                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 */
                                date_latest_value?: string;
                                /**
                                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                                 *
                                 * @example specific
                                 */
                                file_types_mode?: 'specific' | 'all';
                                /**
                                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                                 *   `other` - Allows file types defined in the `file_types_other` array.
                                 */
                                file_types_supported?: string[];
                                /** @description (file) A list of other file types allowed with the file upload option. */
                                file_types_other?: string[];
                                /**
                                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                                 *
                                 * @example 5
                                 */
                                file_max_size?: number;
                                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                                text_characters_limited?: boolean;
                                /**
                                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                                 *
                                 * @example 1
                                 */
                                text_min_length?: number;
                                /**
                                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                                 *
                                 * @example 55
                                 */
                                text_max_length?: number;
                                /**
                                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example true
                                 */
                                text_lines_limited?: boolean;
                                /**
                                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example 4
                                 */
                                text_max_lines?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the value of a number option.
                                 *
                                 * @example true
                                 */
                                number_limited?: boolean;
                                /**
                                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                                 *
                                 * @example lowest
                                 */
                                number_limit_mode?: 'lowest' | 'highest' | 'range';
                                /**
                                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                                 *
                                 * @example 100
                                 */
                                number_lowest_value?: number;
                                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                                number_highest_value?: number;
                                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                                number_integers_only?: boolean;
                                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                                product_list_adjusts_inventory?: boolean;
                                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                                product_list_adjusts_pricing?: boolean;
                                /**
                                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                                 *
                                 * @example weight
                                 */
                                product_list_shipping_calc?: 'none' | 'weight' | 'package';
                            };
                            option_values?: (({
                                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                                is_default?: boolean;
                                /**
                                 * @description The text display identifying the value on the storefront. Required in a /POST.
                                 *
                                 * @example Green
                                 */
                                label: string;
                                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                                sort_order: number;
                                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                                value_data?: {
                                    [key: string]: unknown;
                                };
                            } & {
                                adjusters?: {
                                    /**
                                     * Adjuster
                                     * @description Adjuster for Complex Rules.
                                     */
                                    price?: {
                                        /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                        adjuster?: 'relative' | 'percentage';
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        adjuster_value?: number;
                                    };
                                    /**
                                     * Adjuster
                                     * @description Adjuster for Complex Rules.
                                     */
                                    weight?: {
                                        /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                        adjuster?: 'relative' | 'percentage';
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        adjuster_value?: number;
                                    };
                                    /**
                                     * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                     *
                                     * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                     */
                                    image_url?: string;
                                    purchasing_disabled?: {
                                        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                        status?: boolean;
                                        /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                                        message?: string;
                                    };
                                };
                            }) & {
                                /** @description The unique numeric ID of the value; increments sequentially. */
                                id?: number;
                            })[];
                        } & {
                            /**
                             * @description The unique numeric ID of the modifier; increments sequentially.
                             *
                             * @example 12
                             */
                            id?: number;
                            /**
                             * @description The unique numeric ID of the product to which the option belongs.
                             *
                             * @example 77
                             */
                            product_id?: number;
                            /**
                             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
                             *
                             * @example Add-a-$5-Donation1535039590-191
                             */
                            name?: string;
                            /**
                             * @description The name of the option shown on the storefront.
                             *
                             * @example Donation
                             */
                            display_name?: string;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
            /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
                    required: boolean;
                    /** @description The order the modifiers display on the product detail page. */
                    sort_order?: number;
                    /**
                     * Option Config
                     * @description The values for option config can vary based on the Modifier created.
                     */
                    config?: {
                        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** @description (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /**
                         * @description (date) The type of limit that is allowed to be entered on a date option.
                         *
                         * @example range
                         */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /**
                         * Format: date-time
                         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2018-08-31T00:00:00+00:00
                         */
                        date_earliest_value?: string;
                        /**
                         * Format: date-time
                         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2019-01-01T00:00:00+00:00
                         */
                        date_latest_value?: string;
                        /**
                         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                         *
                         * @example specific
                         */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         *
                         * @example images,documents,other
                         */
                        file_types_supported?: string[];
                        /**
                         * @description (file) A list of other file types allowed with the file upload option.
                         *
                         * @example pdf,txt
                         */
                        file_types_other?: string[];
                        /**
                         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                         *
                         * @example 5
                         */
                        file_max_size?: number;
                        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /**
                         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                         *
                         * @example 1
                         */
                        text_min_length?: number;
                        /**
                         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                         *
                         * @example 55
                         */
                        text_max_length?: number;
                        /**
                         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                         *
                         * @example true
                         */
                        text_lines_limited?: boolean;
                        /**
                         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                         *
                         * @example 4
                         */
                        text_max_lines?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the value of a number option.
                         *
                         * @example true
                         */
                        number_limited?: boolean;
                        /**
                         * @description (numbers_only_text) The type of limit on values entered for a number option.
                         *
                         * @example lowest
                         */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /**
                         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                         *
                         * @example 100
                         */
                        number_lowest_value?: number;
                        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /**
                         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                         *
                         * @example weight
                         */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    option_values?: (({
                        /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                        is_default?: boolean;
                        /**
                         * @description The text display identifying the value on the storefront. Required in a /POST.
                         *
                         * @example Green
                         */
                        label: string;
                        /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                        sort_order: number;
                        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                        value_data?: {
                            [key: string]: unknown;
                        };
                    } & {
                        adjusters?: {
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            price?: {
                                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                adjuster_value?: number;
                            };
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            weight?: {
                                /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                adjuster?: 'relative' | 'percentage';
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                adjuster_value?: number;
                            };
                            /**
                             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                             *
                             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                             */
                            image_url?: string;
                            purchasing_disabled?: {
                                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                status?: boolean;
                                /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                                message?: string;
                            };
                        };
                    }) & {
                        /** @description The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    })[];
                } & {
                    /**
                     * @description The name of the option shown on the storefront.
                     *
                     * @example Donation
                     */
                    display_name: string;
                };
            };
        };
    };
    /** Returns a single *Product Modifier*. Optional parameters can be passed in. */
    getModifierById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['productModifier_Full'];
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
    };
    /** Updates a *Product Modifier*. */
    updateModifier: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Modifer
                         * @description Product Modifier
                         */
                        data?: {
                            /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                            type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST. */
                            required: boolean;
                            /** @description The order the modifiers display on the product detail page. */
                            sort_order?: number;
                            /**
                             * Option Config
                             * @description The values for option config can vary based on the Modifier created.
                             */
                            config?: {
                                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                                default_value?: string;
                                /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                                checked_by_default?: boolean;
                                /** @description (checkbox) Label displayed for the checkbox option. */
                                checkbox_label?: string;
                                /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                                date_limited?: boolean;
                                /**
                                 * @description (date) The type of limit that is allowed to be entered on a date option.
                                 *
                                 * @example range
                                 */
                                date_limit_mode?: 'earliest' | 'range' | 'latest';
                                /**
                                 * Format: date
                                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 */
                                date_earliest_value?: string;
                                /**
                                 * Format: date
                                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 */
                                date_latest_value?: string;
                                /**
                                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                                 *
                                 * @example specific
                                 */
                                file_types_mode?: 'specific' | 'all';
                                /**
                                 * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                                 *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                                 *   `other` - Allows file types defined in the `file_types_other` array.
                                 */
                                file_types_supported?: string[];
                                /** @description (file) A list of other file types allowed with the file upload option. */
                                file_types_other?: string[];
                                /**
                                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                                 *
                                 * @example 5
                                 */
                                file_max_size?: number;
                                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                                text_characters_limited?: boolean;
                                /**
                                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                                 *
                                 * @example 1
                                 */
                                text_min_length?: number;
                                /**
                                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                                 *
                                 * @example 55
                                 */
                                text_max_length?: number;
                                /**
                                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example true
                                 */
                                text_lines_limited?: boolean;
                                /**
                                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example 4
                                 */
                                text_max_lines?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the value of a number option.
                                 *
                                 * @example true
                                 */
                                number_limited?: boolean;
                                /**
                                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                                 *
                                 * @example lowest
                                 */
                                number_limit_mode?: 'lowest' | 'highest' | 'range';
                                /**
                                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                                 *
                                 * @example 100
                                 */
                                number_lowest_value?: number;
                                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                                number_highest_value?: number;
                                /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                                number_integers_only?: boolean;
                                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                                product_list_adjusts_inventory?: boolean;
                                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                                product_list_adjusts_pricing?: boolean;
                                /**
                                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                                 *
                                 * @example weight
                                 */
                                product_list_shipping_calc?: 'none' | 'weight' | 'package';
                            };
                            option_values?: (({
                                /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                                is_default?: boolean;
                                /**
                                 * @description The text display identifying the value on the storefront. Required in a /POST.
                                 *
                                 * @example Green
                                 */
                                label: string;
                                /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                                sort_order: number;
                                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                                value_data?: {
                                    [key: string]: unknown;
                                };
                            } & {
                                adjusters?: {
                                    /**
                                     * Adjuster
                                     * @description Adjuster for Complex Rules.
                                     */
                                    price?: {
                                        /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                        adjuster?: 'relative' | 'percentage';
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        adjuster_value?: number;
                                    };
                                    /**
                                     * Adjuster
                                     * @description Adjuster for Complex Rules.
                                     */
                                    weight?: {
                                        /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                        adjuster?: 'relative' | 'percentage';
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        adjuster_value?: number;
                                    };
                                    /**
                                     * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                     *
                                     * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                     */
                                    image_url?: string;
                                    purchasing_disabled?: {
                                        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                        status?: boolean;
                                        /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                                        message?: string;
                                    };
                                };
                            }) & {
                                /** @description The unique numeric ID of the value; increments sequentially. */
                                id?: number;
                            })[];
                        } & {
                            /**
                             * @description The unique numeric ID of the modifier; increments sequentially.
                             *
                             * @example 12
                             */
                            id?: number;
                            /**
                             * @description The unique numeric ID of the product to which the option belongs.
                             *
                             * @example 77
                             */
                            product_id?: number;
                            /**
                             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
                             *
                             * @example Add-a-$5-Donation1535039590-191
                             */
                            name?: string;
                            /**
                             * @description The name of the option shown on the storefront.
                             *
                             * @example Donation
                             */
                            display_name?: string;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`. */
            409: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
            /** The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST. */
                    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
                    /** @description Whether or not this modifier is required or not at checkout. Required in a /POST. */
                    required: boolean;
                    /** @description The order the modifiers display on the product detail page. */
                    sort_order?: number;
                    /**
                     * Option Config
                     * @description The values for option config can vary based on the Modifier created.
                     */
                    config?: {
                        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string. */
                        default_value?: string;
                        /** @description (checkbox) Flag for setting the checkbox to be checked by default. */
                        checked_by_default?: boolean;
                        /** @description (checkbox) Label displayed for the checkbox option. */
                        checkbox_label?: string;
                        /** @description (date) Flag to limit the dates allowed to be entered on a date option. */
                        date_limited?: boolean;
                        /**
                         * @description (date) The type of limit that is allowed to be entered on a date option.
                         *
                         * @example range
                         */
                        date_limit_mode?: 'earliest' | 'range' | 'latest';
                        /**
                         * Format: date
                         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         */
                        date_earliest_value?: string;
                        /**
                         * Format: date
                         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         */
                        date_latest_value?: string;
                        /**
                         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                         *
                         * @example specific
                         */
                        file_types_mode?: 'specific' | 'all';
                        /**
                         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *   `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *   `other` - Allows file types defined in the `file_types_other` array.
                         */
                        file_types_supported?: string[];
                        /** @description (file) A list of other file types allowed with the file upload option. */
                        file_types_other?: string[];
                        /**
                         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                         *
                         * @example 5
                         */
                        file_max_size?: number;
                        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input. */
                        text_characters_limited?: boolean;
                        /**
                         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                         *
                         * @example 1
                         */
                        text_min_length?: number;
                        /**
                         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                         *
                         * @example 55
                         */
                        text_max_length?: number;
                        /**
                         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                         *
                         * @example true
                         */
                        text_lines_limited?: boolean;
                        /**
                         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                         *
                         * @example 4
                         */
                        text_max_lines?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the value of a number option.
                         *
                         * @example true
                         */
                        number_limited?: boolean;
                        /**
                         * @description (numbers_only_text) The type of limit on values entered for a number option.
                         *
                         * @example lowest
                         */
                        number_limit_mode?: 'lowest' | 'highest' | 'range';
                        /**
                         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                         *
                         * @example 100
                         */
                        number_lowest_value?: number;
                        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true. */
                        number_highest_value?: number;
                        /** @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only. */
                        number_integers_only?: boolean;
                        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list. */
                        product_list_adjusts_inventory?: boolean;
                        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price. */
                        product_list_adjusts_pricing?: boolean;
                        /**
                         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                         *
                         * @example weight
                         */
                        product_list_shipping_calc?: 'none' | 'weight' | 'package';
                    };
                    option_values?: {
                        /** @description The unique numeric ID of the value; increments sequentially. */
                        id?: number;
                    }[];
                    /**
                     * @description The name of the option shown on the storefront.
                     *
                     * @example Donation
                     */
                    display_name?: string;
                };
            };
        };
    };
    /** Deletes a *Product Modifier*. */
    deleteModifierById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: components['parameters']['ModifierIdParam'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a list of all product *Modifier Values*. Optional parameters can be passed in. */
    getModifierValues: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
                /** Specifies the page number in a limited (paginated) list of products. */
                page?: number;
                /** Controls the number of items per page in a limited (paginated) list of products. */
                limit?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['productModifierOptionValue_Full'][];
                        meta?: components['schemas']['metaCollection_Full'];
                    };
                };
            };
        };
    };
    /**
     * Creates a *Modifier Value*.
     *
     * **Required Fields**
     * * label
     * * sort_order
     *
     * **Read-Only Fields**
     * * id
     */
    createModifierValue: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Modifier Value
                         * @description Part of Modifier Value Response
                         */
                        data?: ({
                            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                            is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            label: string;
                            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                            sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                            value_data?: {
                                [key: string]: unknown;
                            };
                        } & {
                            adjusters?: {
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                price?: {
                                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    adjuster_value?: number;
                                };
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                weight?: {
                                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    adjuster_value?: number;
                                };
                                /**
                                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                 *
                                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                 */
                                image_url?: string;
                                purchasing_disabled?: {
                                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                    status?: boolean;
                                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                                    message?: string;
                                };
                            };
                        }) & {
                            /** @description The unique numeric ID of the value; increments sequentially. */
                            id?: number;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    label: string;
                    /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: unknown;
                    };
                } & {
                    adjusters?: {
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        price?: {
                            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: ('relative' | 'percentage') | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            adjuster_value?: number;
                        };
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        weight?: {
                            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: ('relative' | 'percentage') | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            adjuster_value?: number;
                        };
                        /**
                         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                         *
                         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                         */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                };
            };
        };
    };
    /** Returns a single *Modifier Value*. Optional parameters can be passed in. */
    getModifierValueById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
            query: {
                /** Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                include_fields?: string;
                /** Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                exclude_fields?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        data?: components['schemas']['productModifierOptionValue_Full'];
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
        };
    };
    /**
     * Updates a *Modifier Value*.
     *
     * **Required Fields**
     * * none
     *
     * **Read-Only Fields**
     * * id
     */
    updateModifierValue: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Modifier Value
                         * @description Part of Modifier Value Response
                         */
                        data?: ({
                            /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                            is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            label: string;
                            /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                            sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                            value_data?: {
                                [key: string]: unknown;
                            };
                        } & {
                            adjusters?: {
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                price?: {
                                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    adjuster_value?: number;
                                };
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                weight?: {
                                    /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                                    adjuster?: 'relative' | 'percentage';
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    adjuster_value?: number;
                                };
                                /**
                                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                 *
                                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                 */
                                image_url?: string;
                                purchasing_disabled?: {
                                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                                    status?: boolean;
                                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                                    message?: string;
                                };
                            };
                        }) & {
                            /** @description The unique numeric ID of the value; increments sequentially. */
                            id?: number;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': ({
                    /** @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers. */
                    is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    label: string;
                    /** @description The order in which the value will be displayed on the product page. Required in a /POST. */
                    sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. */
                    value_data?: {
                        [key: string]: unknown;
                    };
                } & {
                    adjusters?: {
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        price?: {
                            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: ('relative' | 'percentage') | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            adjuster_value?: number;
                        };
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        weight?: {
                            /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront. */
                            adjuster?: ('relative' | 'percentage') | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            adjuster_value?: number;
                        };
                        /**
                         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                         *
                         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                         */
                        image_url?: string;
                        purchasing_disabled?: {
                            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value. */
                            status?: boolean;
                            /** @description The message displayed on the storefront when the purchasing disabled status is `true`. */
                            message?: string;
                        };
                    };
                }) & {
                    /** @description The unique numeric ID of the value; increments sequentially. */
                    id?: number;
                };
            };
        };
    };
    /** Deletes a *Modifier Value*. */
    deleteModifierValueById: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier/Option Value`. */
                value_id: number;
            };
        };
        responses: {
            204: never;
        };
    };
    /**
     * Creates a *Modifier Image*.
     *
     * The image will show on the storefront when the value is selected.
     *
     *  **Required Fields**
     * - image_file: Form posts are the only accepted upload option.
     */
    createModifierImage: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the `Product` to which the resource belongs. */
                product_id: components['parameters']['ProductIdParam'];
                /** The ID of the `Modifier`. */
                modifier_id: number;
                /** The ID of the `Modifier`. */
                value_id: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': {
                        /**
                         * Resource Image
                         * @description An object containing a publicly accessible image URL, or a form post that contains an image file.
                         */
                        data?: {
                            /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file. */
                            image_url?: string;
                        };
                        meta?: components['schemas']['metaEmpty_Full'];
                    };
                };
            };
            /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            400: {
                content: {
                    'application/json': {
                        [key: string]: unknown;
                    };
                };
            };
            /** The resource was not found. */
            404: {
                content: {
                    'application/json': {
                        /** @description 404 HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                        instance?: string;
                    };
                };
            };
            /** Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details. */
            422: {
                content: {
                    'application/json': {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                        instance?: string;
                        /** @description The HTTP status code. */
                        status?: number;
                        /** @description The error title describing the particular error. */
                        title?: string;
                        type?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    image_file?: string;
                };
            };
        };
    };
}
export interface external {
}
