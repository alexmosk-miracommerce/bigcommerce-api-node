/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/customers': {
        /** Returns a list of all *Customers*. Default sorting is by `customer_ID`, from lowest to highest. Optional parameters can be passed in. */
        get: operations['getAllCustomers'];
        /**
         * Creates a *Customer*.
         * **Required Fields**
         * *   `first_name`
         * *   `last_name`
         * *   `email`
         * **Read Only Fields**
         * *   `id`
         * *   `date_created`
         * *   `date_modified`
         * *   `accepts_marketing`
         * *   `addresses`
         * *   `form_fields`
         * ## Notes
         * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
         * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
         * ## Updating Passwords
         * To manually update a customer password in the same way as the control panel, supply a value for the password field:
         * ```json
         * {
         *     "_authentication": {
         *         "password": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         * ## Confirming Passwords
         * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
         * ```json
         * {
         *     "_authentication": {
         *        "password": "12w69Y217PYR96J",
         *        "password_confirmation": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         * ## Forcing Password Resets
         * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
         * ```js showLineNumbers copy
         * {
         *     "_authentication": {
         *         "force_reset": true
         *     }
         * }
         * ```
         */
        post: operations['createANewCustomer'];
        /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
        delete: operations['deleteAllCustomers'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/customers/{customer_id}': {
        /** Returns a single *Customer*. */
        get: operations['getACustomer'];
        /**
         * Updates a *Customer*.
         *
         * **Read Only Fields**
         * *   id
         * *   date_created
         * *   date_modified
         * *   accepts_marketing
         * *   addresses
         * *   form_fields
         *
         * ## Notes
         * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
         * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
         * ## Updating Passwords
         * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
         *
         * ```js showLineNumbers copy
         * {
         *     "_authentication": {
         *         "password": "12w69Y217PYR96J"
         *     }
         * }
         *
         * ```
         *
         * #### Confirming Passwords
         * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
         * ```js showLineNumbers copy
         * {
         *     "_authentication": {
         *        "password": "12w69Y217PYR96J"
         *        "password_confirmation": "12w69Y217PYR96J"
         *     }
         * }
         * ```
         * #### Forcing Password Resets
         * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
         * ```js showLineNumbers copy
         * {
         *     "_authentication": {
         *         "force_reset": true
         *     }
         * }
         * ```
         */
        put: operations['updateACustomer'];
        /** Deletes a *Customer*. */
        delete: operations['deleteACustomer'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
    };
    '/customers/count': {
        /** Returns a count of all *Customers*. */
        get: operations['getACountOfCustomers'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/customers/{customer_id}/validate': {
        /**
         * **This endpoint has special rate limiting protections to protect against abuse.**
         *
         * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.) If the password matches what’s stored against the customer account, the response will be:
         *
         * ```js showLineNumbers copy
         * {
         *     "success": "true"
         * }
         * ```
         * If the password does NOT match, the response will instead be:
         *
         * ```js showLineNumbers copy
         * {
         *     "success": "false"
         * }
         * ```
         */
        post: operations['validateCustomerPassword'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
    };
    '/customers/{customer_id}/addresses': {
        /**
         * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
         * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
         */
        get: operations['getAllCustomerAddresses'];
        /**
         * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
         *
         * **Required Fields**
         * *   first_name
         * *   last_name
         * *   phone
         * *   street_1
         * *   city
         * *   state
         * *   zip
         * *   country
         *
         * **Read Only Fields**
         * *   id
         * *   country_iso2
         */
        post: operations['createACustomerAddress'];
        /** By default, it deletes all *Customer Addresses*. */
        delete: operations['deleteAllCustomerAddresses'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
    };
    '/customers/{customer_id}/addresses/{customer_address_id}': {
        /** Returns a *Customer Address*. */
        get: operations['getACustomerAddress'];
        /**
         * Updates a *Customer Address*.
         *
         * **Read Only Fields**
         * *   id
         * *   country_iso2
         */
        put: operations['updateACustomerAddress'];
        /** Deletes a *Customer Address*. */
        delete: operations['deletesACustomerAddress'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
                /** ID of the customer address. */
                customer_address_id: components['parameters']['customer_address_id'];
            };
        };
    };
    '/customers/{customer_id}/addresses/count': {
        /** Returns a count of addresses for a customer. */
        get: operations['getACountofCustomerAddresses'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
    };
    '/customer_groups': {
        /**
         * Returns a list of *Customer Groups*. Default sorting is by customer-group ID, from lowest to highest.
         *
         * **Note:**
         * The default rate limit for this endpoint is 40 concurrent requests.
         */
        get: operations['getAllCustomerGroups'];
        /**
         * Creates a *Customer Group*.
         *
         * **Required Fields**
         * * name
         *
         * **Note:**
         * The default rate limit for this endpoint is 40 concurrent requests.
         */
        post: operations['createACustomerGroup'];
        /**
         * By default, it deletes all *Customer Groups*.
         * All existing customers are unassigned from the group when it is deleted.
         */
        delete: operations['deleteAllCustomerGroups'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
    '/customer_groups/{customer_group_id}': {
        /** Returns a *Customer Group*. */
        get: operations['getACustomerGroup'];
        /**
         * Updates a *Customer Group*.
         *
         * **Notes**
         *
         * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
         */
        put: operations['updateACustomerGroup'];
        /**
         * Deletes a *Customer Group*.
         *
         * **Notes**
         * - All existing customers are unassigned from the group when it is deleted.
         * - The default rate limit for this endpoint is 40 concurrent requests.
         */
        delete: operations['deleteACustomerGroup'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the customer group. */
                customer_group_id: components['parameters']['customer_group_id'];
            };
        };
    };
    '/customer_groups/count': {
        /** Returns a count of all *Customer Groups*. */
        get: operations['getACountOfCustomerGroups'];
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
    };
}
export interface components {
    schemas: {
        /** billingAddress_Full */
        billingAddress_Full: {
            /** @example Jane */
            first_name?: string;
            /** @example Doe */
            last_name?: string;
            company?: string;
            /** @example 123 Main Street */
            street_1?: string;
            street_2?: string;
            /** @example Austin */
            city?: string;
            /** @example TX */
            state?: string;
            /** @example 12345 */
            zip?: string;
            /** @example United States */
            country?: string;
            /** @example US */
            country_iso2?: string;
            phone?: string;
            /** @example janedoe@example.com */
            email?: string;
            form_fields?: {
                /**
                 * @description Name of the form field.
                 * @example License ID
                 */
                name?: string;
                /**
                 * @description Value of the form field.
                 * @example 123BAF
                 */
                value?: string;
            }[];
        };
        /** customerFormFields */
        customerFormFields: {
            /**
             * @description Name of the form field.
             * @example License ID
             */
            name?: string;
            /**
             * @description Value of the form field.
             * @example 123BAF
             */
            value?: string;
        };
        /** shippingAddress_Full */
        shippingAddress_Full: {
            /**
             * @description URL of the shipping address for API requests.
             * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/shippingaddresses
             */
            url?: string;
            /** @example /orders/129/shippingaddresses */
            resource?: string;
        };
        /** customer_Full */
        customer_Full: {
            /**
             * @description Unique numeric ID of this customer. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
             * @example 1
             */
            id?: number;
            /** @description Date on which the customer registered from the storefront or was created in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request. */
            date_created?: string;
            /** @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request. */
            date_modified?: string;
        } & components['schemas']['customer_Base'];
        /** categoryAccessLevel_Full */
        categoryAccessLevel_Full: {
            /**
             * @description + `all` - Customers can access all categories
             *  + `specific`  - Customers can access a specific list of categories
             * + `none` - Customers are prevented from viewing any of the categories in this group.
             */
            type?: 'all' | 'specific' | 'none';
            /**
             * @description Is an array of category IDs and should be supplied only if `type` is specific.
             * @example 18,19,23,34
             */
            categories?: number[];
        };
        /**
         * count_Full
         * @example [object Object]
         */
        count_Full: {
            /** @example 27 */
            count?: number;
        };
        /** customerAddress_Full */
        customerAddress_Full: {
            /**
             * @description ID of this customer address. Read-Only.
             * @example 3
             */
            id?: number;
            /**
             * @description 2-letter ISO Alpha-2 code for the customer’s country. Read-Only.
             * @example US
             */
            country_iso2?: string;
        } & components['schemas']['customerAddress_Base'];
        /**
         * customerGroup_Full
         * @description When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [store control panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing), this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior with the API.
         */
        customerGroup_Full: {
            /**
             * @description ID of the customer group.
             * @example 1
             */
            id?: number;
            /**
             * @description Name of the group.
             * @example Wholesale
             */
            name?: string;
            /** @description Determines whether new customers are assigned to this group by default. */
            is_default?: boolean;
            category_access?: components['schemas']['categoryAccessLevel_Full'];
            /** @description A collection of discount rules that are automatically applied to customers who are members of the group. */
            discount_rules?: {
                type?: 'price_list' | 'all' | 'category' | 'product';
                method?: 'percent' | 'fixed' | 'price';
                /**
                 * @description A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
                 * @example "5.0000"
                 */
                amount?: string;
                /**
                 * @description If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
                 * @example 3
                 */
                price_list_id?: number;
            }[];
            /**
             * @description Date on which the customer group was created.
             * @example 2023-07-17T06:30:41.000Z
             */
            date_created?: string;
            /**
             * @description Date on which the customer group was last modified.
             * @example 2023-07-25T01:15:19.000Z
             */
            date_modified?: string;
            /** @description Describes whether the group is for guests. There can only be one customer group for guests at a time. */
            is_group_for_guests?: boolean;
        };
        /**
         * country_Full
         * @example [object Object]
         */
        country_Full: {
            /**
             * @description ID of the country.
             * @example 13
             */
            id?: number;
            /**
             * @description Country name.
             * @example Australia
             */
            country?: string;
            /**
             * @description 2-letter country code.
             * @example AU
             */
            country_iso2?: string;
            /**
             * @description 3-letter country code.
             * @example AUS
             */
            country_iso3?: string;
            /** States Resource */
            states?: {
                /** @example https://api.bigcommerce.com/stores/{store_hash}/v2/countries/13/states */
                url?: string;
                /** @example /countries/13/states */
                resource?: string;
            };
        };
        /** statesResource_Full */
        statesResource_Full: {
            /** @example https://api.bigcommerce.com/stores/{store_hash}/v2/countries/13/states */
            url?: string;
            /** @example /countries/13/states */
            resource?: string;
        };
        /** state_Full */
        state_Full: {
            /**
             * @description Numeric ID of the state/province.
             * @example 208
             */
            id?: number;
            /**
             * @description Name of the state/province.
             * @example Australian Capital Territory
             */
            state?: string;
            /**
             * @description Abbreviation for the state/province.
             * @example ACT
             */
            state_abbreviation?: string;
            /**
             * @description Numeric ID of the state’s/province’s associated country.
             * @example 13
             */
            country_id?: number;
        };
        /**
         * customerGroup_Post
         * @description When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [store control panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing), this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior with the API.
         */
        customerGroup_Post: {
            /**
             * @description Name of the group.
             * @example Wholesale
             */
            name?: string;
            /** @description Determines whether new customers are assigned to this group by default. */
            is_default?: boolean;
            category_access?: components['schemas']['categoryAccessLevel_Full'];
            /** @description A collection of discount rules that are automatically applied to customers who are members of the group. */
            discount_rules?: {
                type?: 'price_list' | 'all' | 'category' | 'product';
                method?: 'percent' | 'fixed' | 'price';
                /**
                 * @description A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
                 * @example "5.0000"
                 */
                amount?: string;
                /**
                 * @description If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
                 * @example 3
                 */
                price_list_id?: number;
            }[];
            /**
             * @description Date on which the customer group was created.
             * @example 2023-07-17T06:30:41.000Z
             */
            date_created?: string;
            /**
             * @description Date on which the customer group was last modified.
             * @example 2023-07-25T01:15:19.000Z
             */
            date_modified?: string;
            /** @description Describes whether the group is for guests. There can only be one customer group for guests at a time. */
            is_group_for_guests?: boolean;
        };
        validatePassword: {
            /** @description Will return `true` or `false`. */
            success?: boolean;
        };
        /** customer_Base */
        customer_Base: {
            /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
            _authentication?: {
                force_reset?: boolean;
                password?: string;
                password_confirmation?: string;
            };
            /**
             * @description The name of the company for which the customer works.
             * @example BigCommerce
             */
            company?: string;
            /**
             * @description First name of the customer.
             * @example Jane
             */
            first_name: string;
            /**
             * @description Last name of the customer.
             * @example Doe
             */
            last_name: string;
            /**
             * @description Email address of the customer.
             * @example janedoe@example.com
             */
            email: string;
            /**
             * @description Phone number of the customer.
             * @example 1234567890
             */
            phone?: string;
            /**
             * @description The amount of credit the customer has. (Float, Float as String, Integer)
             * @example 0
             */
            store_credit?: string;
            /**
             * @description The customer’s IP address when they signed up.
             * @example 12.345.678.910
             */
            registration_ip_address?: string;
            /**
             * @description The group to which the customer belongs.
             * @example 2
             */
            customer_group_id?: number;
            /** @description Store-owner notes on the customer. */
            notes?: string;
            /** @description If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
            tax_exempt_category?: string;
            /**
             * @description Describes whether the customer accepts product review emails or abandon cart emails. Read-Only.
             * @example true
             */
            accepts_marketing?: boolean;
            /** Address Field Resource */
            addresses?: {
                /**
                 * @description Full URL of where the resource is located.
                 * @example https://api.bigcommerce.com/stores/{store_hash}/v2/customers/5/addresses
                 */
                url?: string;
                /**
                 * @description Resource being accessed.
                 * @example /customers/5/addresses
                 */
                resource?: string;
            };
            /** @description Array of custom fields. This is a Read-Only field; do not set or modify its value in a POST or PUT request. */
            form_fields?: {
                /**
                 * @description Name of the form field.
                 * @example License ID
                 */
                name?: string;
                /** @description Value of the form field. */
                value?: string | null;
            }[] | null;
            /** @description Force a password change on next login. */
            reset_pass_on_login?: boolean;
        };
        /** customer_Put */
        customer_Put: {
            /**
             * @description Unique numeric ID of this customer. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
             * @example 1
             */
            id?: number;
            /** @description Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation. */
            _authentication?: {
                force_reset?: boolean;
                password?: string;
                password_confirmation?: string;
            };
            /**
             * @description The name of the company for which the customer works.
             * @example BigCommerce
             */
            company?: string;
            /**
             * @description First name of the customer.
             * @example Jane
             */
            first_name?: string;
            /**
             * @description Last name of the customer.
             * @example Doe
             */
            last_name?: string;
            /**
             * @description Email address of the customer.
             * @example janedoe@example.com
             */
            email?: string;
            /**
             * @description Phone number of the customer.
             * @example 1234567890
             */
            phone?: string;
            /** @description Date on which the customer registered from the storefront or was created in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request. */
            date_created?: string;
            /** @description Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request. */
            date_modified?: string;
            /**
             * @description The amount of credit the customer has. (Float, Float as String, Integer)
             * @example 0
             */
            store_credit?: string;
            /**
             * @description The customer’s IP address when they signed up.
             * @example 12.345.678.910
             */
            registration_ip_address?: string;
            /**
             * @description The group to which the customer belongs.
             * @example 2
             */
            customer_group_id?: number;
            /** @description Store-owner notes on the customer. */
            notes?: string;
            /** @description If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration. */
            tax_exempt_category?: string;
            /**
             * @description Describes whether the customer accepts product review emails and abandon cart emails. Read-Only.
             * @example true
             */
            accepts_marketing?: boolean;
            /** Address Field Resource */
            addresses?: {
                /**
                 * @description Full URL of where the resource is located.
                 * @example https://api.bigcommerce.com/stores/{store_hash}/v2/customers/5/addresses
                 */
                url?: string;
                /**
                 * @description Resource being accessed.
                 * @example /customers/5/addresses
                 */
                resource?: string;
            };
            /** @description Array of custom fields. This is a Read-Only field; do not set or modify its value in a POST or PUT request. */
            form_fields?: {
                /**
                 * @description Name of the form field.
                 * @example License ID
                 */
                name?: string;
                /**
                 * @description Value of the form field.
                 * @example 123BAF
                 */
                value?: string;
            }[];
            /** @description Force a password change on next login. */
            reset_pass_on_login?: boolean;
        };
        ErrorRequest: {
            errors?: components['schemas']['ErrorBasic'][];
        };
        ErrorBasic: {
            /** @description The HTTP status code. */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
        };
        /** customerAddress_Base */
        customerAddress_Base: {
            /**
             * @description ID of the associated customer.
             * @example 5
             */
            customer_id?: number;
            /**
             * @description The customer’s first name.
             * @example Jane
             */
            first_name: string;
            /**
             * @description The customer’s last name.
             * @example Doe
             */
            last_name: string;
            /**
             * @description The customer’s company name.
             * @example BigCommerce
             */
            company?: string;
            /**
             * @description The customer’s street address, line 1.
             * @example 123 Main Street
             */
            street_1: string;
            /** @description The customer’s street address, line 2. */
            street_2?: string;
            /**
             * @description The customer’s city/town/suburb.
             * @example Austin
             */
            city: string;
            /**
             * @description The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
             * @example Texas
             */
            state: string;
            /**
             * @description The customer’s ZIP or postal code.
             * @example 78726
             */
            zip: string;
            /**
             * @description The customer’s country. Must be the full country name.
             * @example United States
             */
            country: string;
            /**
             * @description The customer’s phone number.
             * @example 123-345-7890
             */
            phone: string;
            /** @example residential */
            address_type?: 'residential' | 'commercial';
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
        /** @description Unique numeric ID of the customer. */
        customer_id: number;
        /** @description The ID of the customer group. */
        customer_group_id: number;
        /** @description ID of the customer address. */
        customer_address_id: number;
        /** @description Describes whether the group is for guests. There can only be one customer group for guests at a time. */
        is_group_for_guests: boolean;
    };
}
export interface operations {
    /** Returns a list of all *Customers*. Default sorting is by `customer_ID`, from lowest to highest. Optional parameters can be passed in. */
    getAllCustomers: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                first_name?: string;
                last_name?: string;
                company?: string;
                email?: string;
                phone?: string;
                store_credit?: string;
                customer_group_id?: number;
                min_id?: number;
                max_id?: number;
                min_date_created?: string;
                max_date_created?: string;
                min_date_modified?: string;
                max_date_modified?: string;
                tax_exempt_category?: string;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customer_Full'][];
                };
            };
        };
    };
    /**
     * Creates a *Customer*.
     * **Required Fields**
     * *   `first_name`
     * *   `last_name`
     * *   `email`
     * **Read Only Fields**
     * *   `id`
     * *   `date_created`
     * *   `date_modified`
     * *   `accepts_marketing`
     * *   `addresses`
     * *   `form_fields`
     * ## Notes
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     * ## Updating Passwords
     * To manually update a customer password in the same way as the control panel, supply a value for the password field:
     * ```json
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     * ## Confirming Passwords
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     * ```json
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J",
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     * ## Forcing Password Resets
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     * ```js showLineNumbers copy
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     * ```
     */
    createANewCustomer: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customer_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description This can vary depending on the action being taken to update, validate or force a password change. See [Customers V2, Update a customer (Deprecated)](/docs/rest-management/customers-v2#update-a-customer). */
                    _authentication?: {
                        [key: string]: unknown;
                    };
                    company?: string;
                    first_name?: string;
                    last_name?: string;
                    phone?: string;
                    date_modified?: string;
                    store_credit?: number;
                    registration_ip_address?: string;
                    customer_group_id?: number;
                    notes?: string;
                    tax_exempt_category?: string;
                };
            };
        };
    };
    /** By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted. */
    deleteAllCustomers: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a single *Customer*. */
    getACustomer: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customer_Full'];
                };
            };
        };
    };
    /**
     * Updates a *Customer*.
     *
     * **Read Only Fields**
     * *   id
     * *   date_created
     * *   date_modified
     * *   accepts_marketing
     * *   addresses
     * *   form_fields
     *
     * ## Notes
     * The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.
     * When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.
     * ## Updating Passwords
     * To manually update a customer password in the same way as the control panel, supply a value for the `password` field:
     *
     * ```js showLineNumbers copy
     * {
     *     "_authentication": {
     *         "password": "12w69Y217PYR96J"
     *     }
     * }
     *
     * ```
     *
     * #### Confirming Passwords
     * An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:
     * ```js showLineNumbers copy
     * {
     *     "_authentication": {
     *        "password": "12w69Y217PYR96J"
     *        "password_confirmation": "12w69Y217PYR96J"
     *     }
     * }
     * ```
     * #### Forcing Password Resets
     * To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:
     * ```js showLineNumbers copy
     * {
     *     "_authentication": {
     *         "force_reset": true
     *     }
     * }
     * ```
     */
    updateACustomer: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customer_Base'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['customer_Put'];
            };
        };
    };
    /** Deletes a *Customer*. */
    deleteACustomer: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a count of all *Customers*. */
    getACountOfCustomers: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['count_Full'];
                };
            };
        };
    };
    /**
     * **This endpoint has special rate limiting protections to protect against abuse.**
     *
     * Provided a password, will return a true/false response indicating if the provided password matches the customer’s current password. This endpoint is useful if you want to power the login of another system using BigCommerce’s stored customer accounts, or as a safe way to migrate passwords to another system (by checking them against BigCommerce’s password, and if correct, storing it in another system securely.) If the password matches what’s stored against the customer account, the response will be:
     *
     * ```js showLineNumbers copy
     * {
     *     "success": "true"
     * }
     * ```
     * If the password does NOT match, the response will instead be:
     *
     * ```js showLineNumbers copy
     * {
     *     "success": "false"
     * }
     * ```
     */
    validateCustomerPassword: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['validatePassword'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description String to run against customer password. Will return a true or false. */
                    password?: string;
                };
            };
        };
    };
    /**
     * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.
     * The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
     */
    getAllCustomerAddresses: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerAddress_Full'][];
                };
            };
        };
    };
    /**
     * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     *
     * **Required Fields**
     * *   first_name
     * *   last_name
     * *   phone
     * *   street_1
     * *   city
     * *   state
     * *   zip
     * *   country
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    createACustomerAddress: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerAddress_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['customerAddress_Base'];
            };
        };
    };
    /** By default, it deletes all *Customer Addresses*. */
    deleteAllCustomerAddresses: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a *Customer Address*. */
    getACustomerAddress: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
                /** ID of the customer address. */
                customer_address_id: components['parameters']['customer_address_id'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerAddress_Full'];
                };
            };
        };
    };
    /**
     * Updates a *Customer Address*.
     *
     * **Read Only Fields**
     * *   id
     * *   country_iso2
     */
    updateACustomerAddress: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
                /** ID of the customer address. */
                customer_address_id: components['parameters']['customer_address_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerAddress_Full'];
                };
            };
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description ID of this customer address. Read-Only.
                     * @example 3
                     */
                    id?: number;
                    /**
                     * @description ID of the associated customer.
                     * @example 5
                     */
                    customer_id?: number;
                    /**
                     * @description The customer’s first name.
                     * @example Jane
                     */
                    first_name: string;
                    /**
                     * @description The customer’s last name.
                     * @example Doe
                     */
                    last_name: string;
                    /**
                     * @description The customer’s company name.
                     * @example BigCommerce
                     */
                    company?: string;
                    /**
                     * @description The customer’s street address, line 1.
                     * @example 123 Main Street
                     */
                    street_1: string;
                    /** @description The customer’s street address, line 2. */
                    street_2?: string;
                    /**
                     * @description The customer’s city/town/suburb.
                     * @example Austin
                     */
                    city: string;
                    /**
                     * @description The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
                     * @example Texas
                     */
                    state: string;
                    /**
                     * @description The customer’s ZIP or postal code.
                     * @example 78726
                     */
                    zip: string;
                    /**
                     * @description The customer’s country. Must be the full country name.
                     * @example United States
                     */
                    country: string;
                    /**
                     * @description 2-letter ISO Alpha-2 code for the customer’s country. Read-Only.
                     * @example US
                     */
                    country_iso2?: string;
                    /**
                     * @description The customer’s phone number.
                     * @example 123-345-7890
                     */
                    phone: string;
                    /** @example residential */
                    address_type?: 'residential' | 'commercial';
                };
            };
        };
    };
    /** Deletes a *Customer Address*. */
    deletesACustomerAddress: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
                /** ID of the customer address. */
                customer_address_id: components['parameters']['customer_address_id'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a count of addresses for a customer. */
    getACountofCustomerAddresses: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** Unique numeric ID of the customer. */
                customer_id: components['parameters']['customer_id'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['count_Full'];
                };
            };
        };
    };
    /**
     * Returns a list of *Customer Groups*. Default sorting is by customer-group ID, from lowest to highest.
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    getAllCustomerGroups: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
                /** Filter customer groups by exact name match. */
                name?: string;
                /** Filter customer groups by name, using a fuzzy matching method. */
                'name:like'?: string;
                /** Filter by customers who sign up are added to this group by default. */
                is_default?: boolean;
                /** Filter customer groups by date_created. `date_created=2018-09-05T13:43:54` */
                date_created?: string;
                /** Filter customer groups by maximum date_created. `date_created:max=2018-09-10` */
                'date_created:max'?: string;
                /** Filter customer groups by date_created. `date_created:min=2018-09-05` */
                'date_created:min'?: string;
                /** Filter customer groups by date_modified. `date_modified=2018-09-05T13:45:03` */
                date_modified?: string;
                /** Filter customer groups by minimum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
                '`date_modified:min`'?: string;
                /** Filter customer groups by maximum date_modified. `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
                '`date_modified:max`'?: string;
                /** Filter whether the group is for guests. There can only be one customer group for guests at a time. */
                is_group_for_guests?: boolean;
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerGroup_Full'][];
                };
            };
        };
    };
    /**
     * Creates a *Customer Group*.
     *
     * **Required Fields**
     * * name
     *
     * **Note:**
     * The default rate limit for this endpoint is 40 concurrent requests.
     */
    createACustomerGroup: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerGroup_Full'];
                };
            };
            /** The customer group was created, but the sitewide discount update failed. You may retry the request. */
            207: {
                content: {
                    'application/json': {
                        status?: number;
                        message?: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['customerGroup_Post'];
            };
        };
    };
    /**
     * By default, it deletes all *Customer Groups*.
     * All existing customers are unassigned from the group when it is deleted.
     */
    deleteAllCustomerGroups: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
        responses: {
            204: never;
        };
    };
    /** Returns a *Customer Group*. */
    getACustomerGroup: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the customer group. */
                customer_group_id: components['parameters']['customer_group_id'];
            };
            query: {
                /** Number of pages. */
                page?: number;
                /** Count per page. */
                limit?: number;
                /** Name of the customer groups. */
                name?: string;
                /** Filter items by date_created. `date_created=2018-09-05T13:43:54` */
                date_created?: string;
                /** Filter items by maximum date_created. `date_created:max=2018-09-10` */
                'date_created:max'?: string;
                /** Filter items by date_created. `date_created:min=2018-09-05` */
                'date_created:min'?: string;
                /** Filter items by date_modified. `date_modified=2018-09-05T13:45:03` */
                date_modified?: string;
                /** Filter items by minimum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04` */
                'date_modified:min'?: string;
                /** Filter items by maximum date_modified. `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04` */
                'date_modified:max'?: string;
                /** Whether customers who sign up are added to this group by default. */
                is_default?: boolean;
            };
        };
        responses: {
            /** The request was successful. */
            200: {
                content: {
                    'application/json': components['schemas']['customerGroup_Full'];
                };
            };
            /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            400: {
                content: {
                    'application/json': components['schemas']['ErrorRequest'];
                };
            };
        };
    };
    /**
     * Updates a *Customer Group*.
     *
     * **Notes**
     *
     * Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
     */
    updateACustomerGroup: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                'Content-Type': components['parameters']['ContentType'];
            };
            path: {
                /** The ID of the customer group. */
                customer_group_id: components['parameters']['customer_group_id'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['customerGroup_Full'];
                };
            };
            /** The customer group was updated, but the sitewide discount update failed. You may retry the request. */
            207: {
                content: {
                    'application/json': {
                        status: number;
                        message: string;
                    };
                };
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['customerGroup_Full'];
            };
        };
    };
    /**
     * Deletes a *Customer Group*.
     *
     * **Notes**
     * - All existing customers are unassigned from the group when it is deleted.
     * - The default rate limit for this endpoint is 40 concurrent requests.
     */
    deleteACustomerGroup: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
            path: {
                /** The ID of the customer group. */
                customer_group_id: components['parameters']['customer_group_id'];
            };
        };
        responses: {
            /** No content. Request was successful but produced no response. */
            204: never;
            /** Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            400: {
                content: {
                    'application/json': components['schemas']['ErrorRequest'];
                };
            };
        };
    };
    /** Returns a count of all *Customer Groups*. */
    getACountOfCustomerGroups: {
        parameters: {
            header: {
                /** The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components['parameters']['Accept'];
            };
        };
        responses: {
            200: {
                content: {
                    'application/json': components['schemas']['count_Full'];
                };
            };
        };
    };
}
export interface external {
}
